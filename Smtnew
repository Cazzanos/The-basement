
--[[
    Cazan UI Library v1.0
    Professional UI Library for Roblox Executors
    Compatible with: Arceus X, Fluxus, KRNL, and other executors
    
    Features:
    - Modern dark theme with red accents
    - Cross-platform support (PC/Mobile)
    - Drag functionality
    - Toggles, Sliders, Dropdowns, Tabs
    - Notification system
    - Smooth animations
    - Responsive design
]]

local CazanUI = {}
CazanUI.__index = CazanUI

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Constants
local COLORS = {
    Background = Color3.fromRGB(20, 20, 20),
    Panel = Color3.fromRGB(35, 35, 35),
    Accent = Color3.fromRGB(200, 0, 0),
    Text = Color3.fromRGB(255, 255, 255),
    TextSecondary = Color3.fromRGB(180, 180, 180),
    Border = Color3.fromRGB(60, 60, 60),
    Hover = Color3.fromRGB(45, 45, 45)
}

local FONTS = {
    Header = Enum.Font.GothamBold,
    Body = Enum.Font.Gotham,
    Light = Enum.Font.GothamLight
}

local ANIMATIONS = {
    Fast = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    Medium = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    Slow = TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
}

-- Utility Functions
local function CreateInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties or {}) do
        instance[property] = value
    end
    return instance
end

local function AddCorner(parent, radius)
    return CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, radius or 8),
        Parent = parent
    })
end

local function AddStroke(parent, color, thickness)
    return CreateInstance("UIStroke", {
        Color = color or COLORS.Border,
        Thickness = thickness or 1,
        Parent = parent
    })
end

local function TweenProperty(object, properties, tweenInfo)
    local tween = TweenService:Create(object, tweenInfo or ANIMATIONS.Fast, properties)
    tween:Play()
    return tween
end

-- Component Classes
local Toggle = {}
Toggle.__index = Toggle

function Toggle.new(parent, text, defaultValue, callback)
    local self = setmetatable({}, Toggle)
    
    self.Value = defaultValue or false
    self.Callback = callback or function() end
    
    -- Main Frame
    self.Frame = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 35),
        BackgroundTransparency = 1,
        Parent = parent
    })
    
    -- Text Label
    self.Label = CreateInstance("TextLabel", {
        Size = UDim2.new(1, -50, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = FONTS.Body,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.Frame
    })
    
    -- Toggle Button
    self.ToggleFrame = CreateInstance("Frame", {
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(1, -40, 0.5, -10),
        BackgroundColor3 = COLORS.Panel,
        Parent = self.Frame
    })
    AddCorner(self.ToggleFrame, 10)
    AddStroke(self.ToggleFrame, COLORS.Border)
    
    -- Toggle Circle
    self.ToggleCircle = CreateInstance("Frame", {
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, 2, 0, 2),
        BackgroundColor3 = COLORS.TextSecondary,
        Parent = self.ToggleFrame
    })
    AddCorner(self.ToggleCircle, 8)
    
    -- Button for clicking
    self.Button = CreateInstance("TextButton", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = "",
        Parent = self.ToggleFrame
    })
    
    -- Events
    self.Button.MouseButton1Click:Connect(function()
        self:Toggle()
    end)
    
    -- Initialize state
    self:UpdateVisual()
    
    return self
end

function Toggle:Toggle()
    self.Value = not self.Value
    self:UpdateVisual()
    self.Callback(self.Value)
end

function Toggle:UpdateVisual()
    local targetPos = self.Value and UDim2.new(1, -18, 0, 2) or UDim2.new(0, 2, 0, 2)
    local targetColor = self.Value and COLORS.Accent or COLORS.TextSecondary
    local frameColor = self.Value and COLORS.Accent or COLORS.Panel
    
    TweenProperty(self.ToggleCircle, {Position = targetPos, BackgroundColor3 = targetColor})
    TweenProperty(self.ToggleFrame, {BackgroundColor3 = frameColor})
end

-- Slider Class
local Slider = {}
Slider.__index = Slider

function Slider.new(parent, text, min, max, defaultValue, callback)
    local self = setmetatable({}, Slider)
    
    self.Min = min or 0
    self.Max = max or 100
    self.Value = defaultValue or min or 0
    self.Callback = callback or function() end
    self.Dragging = false
    
    -- Main Frame
    self.Frame = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundTransparency = 1,
        Parent = parent
    })
    
    -- Text Label
    self.Label = CreateInstance("TextLabel", {
        Size = UDim2.new(1, -80, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = FONTS.Body,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.Frame
    })
    
    -- Value Label
    self.ValueLabel = CreateInstance("TextLabel", {
        Size = UDim2.new(0, 70, 0, 20),
        Position = UDim2.new(1, -70, 0, 0),
        BackgroundTransparency = 1,
        Text = tostring(self.Value),
        TextColor3 = COLORS.Accent,
        TextSize = 14,
        Font = FONTS.Body,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = self.Frame
    })
    
    -- Slider Track
    self.Track = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 6),
        Position = UDim2.new(0, 0, 1, -16),
        BackgroundColor3 = COLORS.Panel,
        Parent = self.Frame
    })
    AddCorner(self.Track, 3)
    
    -- Slider Fill
    self.Fill = CreateInstance("Frame", {
        Size = UDim2.new(0, 0, 1, 0),
        BackgroundColor3 = COLORS.Accent,
        Parent = self.Track
    })
    AddCorner(self.Fill, 3)
    
    -- Slider Handle
    self.Handle = CreateInstance("Frame", {
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, -8, 0.5, -8),
        BackgroundColor3 = COLORS.Accent,
        Parent = self.Track
    })
    AddCorner(self.Handle, 8)
    
    -- Button for dragging
    self.Button = CreateInstance("TextButton", {
        Size = UDim2.new(1, 20, 1, 20),
        Position = UDim2.new(0, -10, 0, -10),
        BackgroundTransparency = 1,
        Text = "",
        Parent = self.Track
    })
    
    -- Events
    self.Button.MouseButton1Down:Connect(function()
        self.Dragging = true
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            self.Dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if self.Dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            self:UpdateFromMouse()
        end
    end)
    
    -- Touch support
    self.Button.TouchTap:Connect(function()
        self:UpdateFromMouse()
    end)
    
    -- Initialize
    self:UpdateVisual()
    
    return self
end

function Slider:UpdateFromMouse()
    local mouse = Players.LocalPlayer:GetMouse()
    local trackPos = self.Track.AbsolutePosition.X
    local trackSize = self.Track.AbsoluteSize.X
    local mouseX = mouse.X
    
    local relativeX = math.clamp((mouseX - trackPos) / trackSize, 0, 1)
    local newValue = self.Min + (self.Max - self.Min) * relativeX
    
    self:SetValue(newValue)
end

function Slider:SetValue(value)
    self.Value = math.clamp(value, self.Min, self.Max)
    self:UpdateVisual()
    self.Callback(self.Value)
end

function Slider:UpdateVisual()
    local percentage = (self.Value - self.Min) / (self.Max - self.Min)
    
    self.ValueLabel.Text = string.format("%.3f", self.Value)
    TweenProperty(self.Fill, {Size = UDim2.new(percentage, 0, 1, 0)})
    TweenProperty(self.Handle, {Position = UDim2.new(percentage, -8, 0.5, -8)})
end

-- Dropdown Class
local Dropdown = {}
Dropdown.__index = Dropdown

function Dropdown.new(parent, text, options, defaultValue, callback)
    local self = setmetatable({}, Dropdown)
    
    self.Options = options or {}
    self.Value = defaultValue or (options and options[1]) or ""
    self.Callback = callback or function() end
    self.Open = false
    
    -- Main Frame
    self.Frame = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 35),
        BackgroundTransparency = 1,
        Parent = parent
    })
    
    -- Text Label
    self.Label = CreateInstance("TextLabel", {
        Size = UDim2.new(0.5, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = FONTS.Body,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.Frame
    })
    
    -- Dropdown Button
    self.DropdownButton = CreateInstance("TextButton", {
        Size = UDim2.new(0.5, -10, 0, 25),
        Position = UDim2.new(0.5, 5, 0.5, -12.5),
        BackgroundColor3 = COLORS.Panel,
        Text = self.Value,
        TextColor3 = COLORS.Text,
        TextSize = 12,
        Font = FONTS.Body,
        Parent = self.Frame
    })
    AddCorner(self.DropdownButton, 4)
    AddStroke(self.DropdownButton, COLORS.Border)
    
    -- Arrow
    self.Arrow = CreateInstance("TextLabel", {
        Size = UDim2.new(0, 20, 1, 0),
        Position = UDim2.new(1, -20, 0, 0),
        BackgroundTransparency = 1,
        Text = "â–¼",
        TextColor3 = COLORS.TextSecondary,
        TextSize = 10,
        Font = FONTS.Body,
        Parent = self.DropdownButton
    })
    
    -- Options Frame
    self.OptionsFrame = CreateInstance("Frame", {
        Size = UDim2.new(0.5, -10, 0, 0),
        Position = UDim2.new(0.5, 5, 1, 5),
        BackgroundColor3 = COLORS.Panel,
        Visible = false,
        ZIndex = 10,
        Parent = self.Frame
    })
    AddCorner(self.OptionsFrame, 4)
    AddStroke(self.OptionsFrame, COLORS.Border)
    
    -- Options List
    self.OptionsList = CreateInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = self.OptionsFrame
    })
    
    -- Create option buttons
    for i, option in ipairs(self.Options) do
        local optionButton = CreateInstance("TextButton", {
            Size = UDim2.new(1, 0, 0, 25),
            BackgroundColor3 = COLORS.Panel,
            Text = option,
            TextColor3 = COLORS.Text,
            TextSize = 12,
            Font = FONTS.Body,
            Parent = self.OptionsFrame
        })
        
        optionButton.MouseEnter:Connect(function()
            TweenProperty(optionButton, {BackgroundColor3 = COLORS.Hover})
        end)
        
        optionButton.MouseLeave:Connect(function()
            TweenProperty(optionButton, {BackgroundColor3 = COLORS.Panel})
        end)
        
        optionButton.MouseButton1Click:Connect(function()
            self:SelectOption(option)
        end)
    end
    
    -- Events
    self.DropdownButton.MouseButton1Click:Connect(function()
        self:Toggle()
    end)
    
    return self
end

function Dropdown:Toggle()
    self.Open = not self.Open
    
    if self.Open then
        local optionCount = #self.Options
        self.OptionsFrame.Size = UDim2.new(0.5, -10, 0, optionCount * 25)
        self.OptionsFrame.Visible = true
        self.Arrow.Text = "â–²"
        TweenProperty(self.OptionsFrame, {Size = UDim2.new(0.5, -10, 0, optionCount * 25)})
    else
        self.Arrow.Text = "â–¼"
        TweenProperty(self.OptionsFrame, {Size = UDim2.new(0.5, -10, 0, 0)})
        task.wait(0.15)
        self.OptionsFrame.Visible = false
    end
end

function Dropdown:SelectOption(option)
    self.Value = option
    self.DropdownButton.Text = option
    self:Toggle()
    self.Callback(option)
end

-- Tab System
local TabSystem = {}
TabSystem.__index = TabSystem

function TabSystem.new(parent, tabs)
    local self = setmetatable({}, TabSystem)
    
    self.Tabs = tabs or {}
    self.ActiveTab = nil
    self.TabButtons = {}
    self.TabContents = {}
    
    -- Tab Header
    self.TabHeader = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1,
        Parent = parent
    })
    
    -- Tab Layout
    self.TabLayout = CreateInstance("UIListLayout", {
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 20),
        Parent = self.TabHeader
    })
    
    -- Content Frame
    self.ContentFrame = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 1, -50),
        Position = UDim2.new(0, 0, 0, 50),
        BackgroundTransparency = 1,
        Parent = parent
    })
    
    -- Create tabs
    for i, tabData in ipairs(self.Tabs) do
        self:CreateTab(tabData.name, tabData.content)
    end
    
    -- Activate first tab
    if #self.Tabs > 0 then
        self:ActivateTab(self.Tabs[1].name)
    end
    
    return self
end

function TabSystem:CreateTab(name, contentFunction)
    -- Tab Button
    local tabButton = CreateInstance("TextButton", {
        Size = UDim2.new(0, 80, 1, 0),
        BackgroundTransparency = 1,
        Text = name,
        TextColor3 = COLORS.TextSecondary,
        TextSize = 14,
        Font = FONTS.Body,
        Parent = self.TabHeader
    })
    
    -- Tab Underline
    local underline = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 2),
        Position = UDim2.new(0, 0, 1, -2),
        BackgroundColor3 = COLORS.Accent,
        Visible = false,
        Parent = tabButton
    })
    
    -- Tab Content
    local tabContent = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Visible = false,
        Parent = self.ContentFrame
    })
    
    -- Store references
    self.TabButtons[name] = {button = tabButton, underline = underline}
    self.TabContents[name] = tabContent
    
    -- Create content
    if contentFunction then
        contentFunction(tabContent)
    end
    
    -- Events
    tabButton.MouseButton1Click:Connect(function()
        self:ActivateTab(name)
    end)
    
    tabButton.MouseEnter:Connect(function()
        if self.ActiveTab ~= name then
            TweenProperty(tabButton, {TextColor3 = COLORS.Text})
        end
    end)
    
    tabButton.MouseLeave:Connect(function()
        if self.ActiveTab ~= name then
            TweenProperty(tabButton, {TextColor3 = COLORS.TextSecondary})
        end
    end)
end

function TabSystem:ActivateTab(name)
    -- Deactivate current tab
    if self.ActiveTab then
        local oldTab = self.TabButtons[self.ActiveTab]
        local oldContent = self.TabContents[self.ActiveTab]
        
        TweenProperty(oldTab.button, {TextColor3 = COLORS.TextSecondary})
        oldTab.underline.Visible = false
        oldContent.Visible = false
    end
    
    -- Activate new tab
    local newTab = self.TabButtons[name]
    local newContent = self.TabContents[name]
    
    if newTab and newContent then
        TweenProperty(newTab.button, {TextColor3 = COLORS.Accent})
        newTab.underline.Visible = true
        newContent.Visible = true
        self.ActiveTab = name
    end
end

-- Notification System
local NotificationSystem = {}
NotificationSystem.__index = NotificationSystem

function NotificationSystem.new(parent)
    local self = setmetatable({}, NotificationSystem)
    
    self.Container = CreateInstance("Frame", {
        Size = UDim2.new(0, 300, 1, 0),
        Position = UDim2.new(1, -320, 0, 20),
        BackgroundTransparency = 1,
        Parent = parent
    })
    
    self.Layout = CreateInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = self.Container
    })
    
    return self
end

function NotificationSystem:Notify(text, duration)
    duration = duration or 3
    
    -- Create notification
    local notification = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 60),
        BackgroundColor3 = COLORS.Panel,
        Position = UDim2.new(1, 0, 0, 0),
        Parent = self.Container
    })
    AddCorner(notification, 8)
    AddStroke(notification, COLORS.Accent)
    
    -- Text
    local textLabel = CreateInstance("TextLabel", {
        Size = UDim2.new(1, -20, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.Text,
        TextSize = 12,
        Font = FONTS.Body,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Center,
        Parent = notification
    })
    
    -- Animate in
    TweenProperty(notification, {Position = UDim2.new(0, 0, 0, 0)}, ANIMATIONS.Medium)
    
    -- Auto dismiss
    task.spawn(function()
        task.wait(duration)
        TweenProperty(notification, {Position = UDim2.new(1, 0, 0, 0)}, ANIMATIONS.Medium)
        task.wait(0.25)
        notification:Destroy()
    end)
end

-- Main UI Class
function CazanUI.new()
    local self = setmetatable({}, CazanUI)
    
    -- Create ScreenGui
    self.ScreenGui = CreateInstance("ScreenGui", {
        Name = "CazanUI",
        Parent = CoreGui,
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    -- Main Frame
    self.MainFrame = CreateInstance("Frame", {
        Size = UDim2.new(0, 600, 0, 400),
        Position = UDim2.new(0.5, -300, 0.5, -200),
        BackgroundColor3 = COLORS.Background,
        Parent = self.ScreenGui
    })
    AddCorner(self.MainFrame, 12)
    AddStroke(self.MainFrame, COLORS.Border, 2)
    
    -- Header
    self.Header = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundColor3 = COLORS.Panel,
        Parent = self.MainFrame
    })
    AddCorner(self.Header, 12)
    
    -- Title
    self.Title = CreateInstance("TextLabel", {
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 20, 0, 0),
        BackgroundTransparency = 1,
        Text = "Cazan",
        TextColor3 = COLORS.Accent,
        TextSize = 18,
        Font = FONTS.Header,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.Header
    })
    
    -- Close Button
    self.CloseButton = CreateInstance("TextButton", {
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -40, 0, 10),
        BackgroundColor3 = COLORS.Accent,
        Text = "Ã—",
        TextColor3 = COLORS.Text,
        TextSize = 16,
        Font = FONTS.Header,
        Parent = self.Header
    })
    AddCorner(self.CloseButton, 4)
    
    -- Content Area
    self.ContentArea = CreateInstance("Frame", {
        Size = UDim2.new(1, -20, 1, -70),
        Position = UDim2.new(0, 10, 0, 60),
        BackgroundTransparency = 1,
        Parent = self.MainFrame
    })
    
    -- Initialize Tab System
    self.TabSystem = TabSystem.new(self.ContentArea, {
        {name = "Aimbot", content = function(parent) self:CreateAimbotTab(parent) end},
        {name = "Visuals", content = function(parent) self:CreateVisualsTab(parent) end},
        {name = "Misc", content = function(parent) self:CreateMiscTab(parent) end},
        {name = "Skins", content = function(parent) self:CreateSkinsTab(parent) end},
        {name = "World", content = function(parent) self:CreateWorldTab(parent) end}
    })
    
    -- Initialize Notification System
    self.NotificationSystem = NotificationSystem.new(self.ScreenGui)
    
    -- Initialize Drag System
    self:InitializeDrag()
    
    -- Events
    self.CloseButton.MouseButton1Click:Connect(function()
        self:Destroy()
    end)
    
    return self
end

function CazanUI:CreateAimbotTab(parent)
    -- Left Panel (AutoAim)
    local leftPanel = CreateInstance("Frame", {
        Size = UDim2.new(0.48, 0, 1, 0),
        BackgroundColor3 = COLORS.Panel,
        Parent = parent
    })
    AddCorner(leftPanel, 8)
    AddStroke(leftPanel, COLORS.Border)
    
    local leftTitle = CreateInstance("TextLabel", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1,
        Text = "AutoAim",
        TextColor3 = COLORS.Accent,
        TextSize = 16,
        Font = FONTS.Header,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = leftPanel
    })
    
    local leftContent = CreateInstance("Frame", {
        Size = UDim2.new(1, -20, 1, -40),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        Parent = leftPanel
    })
    
    local leftLayout = CreateInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = leftContent
    })
    
    -- AutoAim Components
    Toggle.new(leftContent, "Enable", false, function(value)
        self:Notify("Aimbot " .. (value and "Enabled" or "Disabled"))
    end)
    
    Toggle.new(leftContent, "Draw Fov", false, function(value)
        self:Notify("FOV Drawing " .. (value and "Enabled" or "Disabled"))
    end)
    
    Toggle.new(leftContent, "Visibility Check", true, function(value)
        self:Notify("Visibility Check " .. (value and "Enabled" or "Disabled"))
    end)
    
    Slider.new(leftContent, "FOV Value", 0, 360, 120, function(value)
        -- FOV callback
    end)
    
    Slider.new(leftContent, "Smoothness", 0, 10, 2.5, function(value)
        -- Smoothness callback
    end)
    
    Dropdown.new(leftContent, "Aimbot Bone", {"Head", "Torso", "HumanoidRootPart"}, "Head", function(value)
        self:Notify("Aimbot bone set to: " .. value)
    end)
    
    -- Right Panel (Accuracy)
    local rightPanel = CreateInstance("Frame", {
        Size = UDim2.new(0.48, 0, 1, 0),
        Position = UDim2.new(0.52, 0, 0, 0),
        BackgroundColor3 = COLORS.Panel,
        Parent = parent
    })
    AddCorner(rightPanel, 8)
    AddStroke(rightPanel, COLORS.Border)
    
    local rightTitle = CreateInstance("TextLabel", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1,
        Text = "Accuracy",
        TextColor3 = COLORS.Accent,
        TextSize = 16,
        Font = FONTS.Header,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = rightPanel
    })
    
    local rightContent = CreateInstance("Frame", {
        Size = UDim2.new(1, -20, 1, -40),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        Parent = rightPanel
    })
    
    local rightLayout = CreateInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = rightContent
    })
    
    -- Accuracy Components
    Toggle.new(rightContent, "Fire Rate", false, function(value)
        self:Notify("Fire Rate " .. (value and "Enabled" or "Disabled"))
    end)
    
    Toggle.new(rightContent, "Infinite Ammo", false, function(value)
        self:Notify("Infinite Ammo " .. (value and "Enabled" or "Disabled"))
    end)
    
    Toggle.new(rightContent, "No Recoil", false, function(value)
        self:Notify("No Recoil " .. (value and "Enabled" or "Disabled"))
    end)
    
    Slider.new(rightContent, "Trigger Delay", 0, 1, 0.2, function(value)
        -- Trigger delay callback
    end)
    
    Slider.new(rightContent, "Crosshair Size", 0, 100, 20, function(value)
        -- Crosshair size callback
    end)
end

function CazanUI:CreateVisualsTab(parent)
    local panel = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = COLORS.Panel,
        Parent = parent
    })
    AddCorner(panel, 8)
    
    local title = CreateInstance("TextLabel", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1,
        Text = "Visual Features",
        TextColor3 = COLORS.Accent,
        TextSize = 18,
        Font = FONTS.Header,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = panel
    })
    
    local content = CreateInstance("Frame", {
        Size = UDim2.new(1, -20, 1, -50),
        Position = UDim2.new(0, 10, 0, 45),
        BackgroundTransparency = 1,
        Parent = panel
    })
    
    local layout = CreateInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = content
    })
    
    Toggle.new(content, "ESP", false, function(value)
        self:Notify("ESP " .. (value and "Enabled" or "Disabled"))
    end)
    
    Toggle.new(content, "Tracers", false, function(value)
        self:Notify("Tracers " .. (value and "Enabled" or "Disabled"))
    end)
    
    Slider.new(content, "ESP Distance", 0, 1000, 500, function(value)
        -- ESP distance callback
    end)
end

function CazanUI:CreateMiscTab(parent)
    local panel = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = COLORS.Panel,
        Parent = parent
    })
    AddCorner(panel, 8)
    
    local title = CreateInstance("TextLabel", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1,
        Text = "Miscellaneous",
        TextColor3 = COLORS.Accent,
        TextSize = 18,
        Font = FONTS.Header,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = panel
    })
    
    local content = CreateInstance("Frame", {
        Size = UDim2.new(1, -20, 1, -50),
        Position = UDim2.new(0, 10, 0, 45),
        BackgroundTransparency = 1,
        Parent = panel
    })
    
    local layout = CreateInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = content
    })
    
    Toggle.new(content, "Speed Hack", false, function(value)
        self:Notify("Speed Hack " .. (value and "Enabled" or "Disabled"))
    end)
    
    Toggle.new(content, "Jump Power", false, function(value)
        self:Notify("Jump Power " .. (value and "Enabled" or "Disabled"))
    end)
    
    Slider.new(content, "Walk Speed", 16, 100, 16, function(value)
        -- Walk speed callback
    end)
end

function CazanUI:CreateSkinsTab(parent)
    local panel = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = COLORS.Panel,
        Parent = parent
    })
    AddCorner(panel, 8)
    
    local title = CreateInstance("TextLabel", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1,
        Text = "Skins & Customization",
        TextColor3 = COLORS.Accent,
        TextSize = 18,
        Font = FONTS.Header,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = panel
    })
    
    local content = CreateInstance("Frame", {
        Size = UDim2.new(1, -20, 1, -50),
        Position = UDim2.new(0, 10, 0, 45),
        BackgroundTransparency = 1,
        Parent = panel
    })
    
    local layout = CreateInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = content
    })
    
    Dropdown.new(content, "Weapon Skin", {"Default", "Gold", "Diamond", "Rainbow"}, "Default", function(value)
        self:Notify("Weapon skin changed to: " .. value)
    end)
    
    Toggle.new(content, "Force Skin", false, function(value)
        self:Notify("Force Skin " .. (value and "Enabled" or "Disabled"))
    end)
end

function CazanUI:CreateWorldTab(parent)
    local panel = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = COLORS.Panel,
        Parent = parent
    })
    AddCorner(panel, 8)
    
    local title = CreateInstance("TextLabel", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1,
        Text = "World Modifications",
        TextColor3 = COLORS.Accent,
        TextSize = 18,
        Font = FONTS.Header,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = panel
    })
    
    local content = CreateInstance("Frame", {
        Size = UDim2.new(1, -20, 1, -50),
        Position = UDim2.new(0, 10, 0, 45),
        BackgroundTransparency = 1,
        Parent = panel
    })
    
    local layout = CreateInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = content
    })
    
    Toggle.new(content, "Fullbright", false, function(value)
        self:Notify("Fullbright " .. (value and "Enabled" or "Disabled"))
    end)
    
    Toggle.new(content, "No Fog", false, function(value)
        self:Notify("No Fog " .. (value and "Enabled" or "Disabled"))
    end)
    
    Slider.new(content, "Time of Day", 0, 24, 12, function(value)
        -- Time of day callback
    end)
end

function CazanUI:InitializeDrag()
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    -- Mouse drag
    self.Header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.MainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            
            -- Clamp to screen bounds
            local screenSize = self.ScreenGui.AbsoluteSize
            local frameSize = self.MainFrame.AbsoluteSize
            
            local clampedX = math.clamp(newPos.X.Offset, 0, screenSize.X - frameSize.X)
            local clampedY = math.clamp(newPos.Y.Offset, 0, screenSize.Y - frameSize.Y)
            
            self.MainFrame.Position = UDim2.new(0, clampedX, 0, clampedY)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Touch drag
    self.Header.TouchTap:Connect(function(touchPositions, processed)
        if not processed then
            dragging = true
            dragStart = touchPositions[1]
            startPos = self.MainFrame.Position
        end
    end)
end

function CazanUI:Notify(text, duration)
    self.NotificationSystem:Notify(text, duration)
end

function CazanUI:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

-- Demo Usage
local function CreateDemo()
    local ui = CazanUI.new()
    
    -- Welcome notification
    task.wait(0.5)
    ui:Notify("Welcome to Cazan UI!", 3)
    
    return ui
end

-- Export
return {
    new = CazanUI.new,
    demo = CreateDemo
}
