local Library = {}
getgenv().UI_CONFIG = getgenv().UI_CONFIG or {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local GuiService = game:GetService("GuiService")

-- Device Detection
local function getDeviceType()
    local screenSize = workspace.CurrentCamera.ViewportSize
    local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
    local isTablet = UserInputService.TouchEnabled and screenSize.X > 1000
    
    if isMobile and not isTablet then
        return "Mobile"
    elseif isTablet then
        return "Tablet"
    else
        return "Desktop"
    end
end

local DeviceType = getDeviceType()
local ScreenSize = workspace.CurrentCamera.ViewportSize

-- Responsive Sizing Configuration
local ResponsiveConfig = {
    Mobile = {
        BaseSize = {X = 350, Y = 400},
        HeaderHeight = 50,
        NavWidth = 160,
        FontSizes = {Large = 14, Medium = 12, Small = 10},
        Padding = 8,
        ElementHeight = 38,
        CornerRadius = 8,
    },
    Tablet = {
        BaseSize = {X = 500, Y = 450},
        HeaderHeight = 55,
        NavWidth = 180,
        FontSizes = {Large = 16, Medium = 14, Small = 12},
        Padding = 12,
        ElementHeight = 42,
        CornerRadius = 10,
    },
    Desktop = {
        BaseSize = {X = 700, Y = 500},
        HeaderHeight = 60,
        NavWidth = 200,
        FontSizes = {Large = 18, Medium = 14, Small = 12},
        Padding = 15,
        ElementHeight = 45,
        CornerRadius = 12,
    }
}

local Config = ResponsiveConfig[DeviceType]

-- Modern Theme Configuration (Optimized)
local Theme = {
    Background = {
        Primary = Color3.fromRGB(15, 15, 23),
        Secondary = Color3.fromRGB(22, 22, 35),
        Tertiary = Color3.fromRGB(28, 28, 42),
        Glass = Color3.fromRGB(35, 35, 55),
    },
    
    Accent = {
        Primary = Color3.fromRGB(99, 102, 241),
        Secondary = Color3.fromRGB(139, 92, 246),
        Success = Color3.fromRGB(34, 197, 94),
        Warning = Color3.fromRGB(251, 191, 36),
        Error = Color3.fromRGB(239, 68, 68),
    },
    
    Text = {
        Primary = Color3.fromRGB(248, 250, 252),
        Secondary = Color3.fromRGB(203, 213, 225),
        Muted = Color3.fromRGB(148, 163, 184),
        Disabled = Color3.fromRGB(100, 116, 139),
    },
    
    Fonts = {
        Primary = Enum.Font.GothamBold,
        Secondary = Enum.Font.Gotham,
        Mono = Enum.Font.RobotoMono,
    },
    
    Animations = {
        Fast = TweenInfo.new(0.15, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
        Medium = TweenInfo.new(0.25, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
        Slow = TweenInfo.new(0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
        Bounce = TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
    },
}

-- Optimized Utility Functions
local Utility = {}
local TweenCache = {}

function Utility:GetTween(object, properties, tweenInfo)
    local key = tostring(object) .. tostring(tweenInfo.Time)
    if not TweenCache[key] then
        TweenCache[key] = TweenService:Create(object, tweenInfo, {})
    end
    
    local tween = TweenCache[key]
    for prop, value in pairs(properties) do
        tween.TweenInfo = tweenInfo
        object[prop] = object[prop] -- Ensure property exists
    end
    
    return TweenService:Create(object, tweenInfo, properties)
end

function Utility:TweenObject(object, properties, tweenInfo, callback)
    local tween = self:GetTween(object, properties, tweenInfo or Theme.Animations.Medium)
    if callback then
        tween.Completed:Connect(callback)
    end
    tween:Play()
    return tween
end

function Utility:CreateCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or Config.CornerRadius)
    corner.Parent = parent
    return corner
end

function Utility:CreateGradient(parent, colors, rotation)
    local gradient = Instance.new("UIGradient")
    gradient.Parent = parent
    gradient.Color = colors or ColorSequence.new{
        ColorSequenceKeypoint.new(0, Theme.Background.Glass),
        ColorSequenceKeypoint.new(1, Theme.Background.Tertiary)
    }
    gradient.Rotation = rotation or 45
    return gradient
end

function Utility:CreateRipple(button, color)
    if button:GetAttribute("HasRipple") then return end
    button:SetAttribute("HasRipple", true)
    button.ClipsDescendants = true
    
    button.MouseButton1Down:Connect(function()
        local ripple = Instance.new("Frame")
        ripple.Name = "Ripple"
        ripple.Parent = button
        ripple.BackgroundColor3 = color or Theme.Accent.Primary
        ripple.BackgroundTransparency = 0.8
        ripple.BorderSizePixel = 0
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        
        self:CreateCorner(ripple, 999)
        
        local mouse = Players.LocalPlayer:GetMouse()
        local buttonPos = button.AbsolutePosition
        local mousePos = Vector2.new(mouse.X, mouse.Y)
        local relativePos = mousePos - buttonPos
        
        ripple.Position = UDim2.new(0, relativePos.X, 0, relativePos.Y)
        ripple.Size = UDim2.new(0, 0, 0, 0)
        
        local maxSize = math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 2
        
        self:TweenObject(ripple, {
            Size = UDim2.new(0, maxSize, 0, maxSize),
            BackgroundTransparency = 1
        }, Theme.Animations.Medium, function()
            ripple:Destroy()
        end)
    end)
end

-- Optimized Dragging System
function Library:DraggingEnabled(frame, parent)
    if frame:GetAttribute("Draggable") then return end
    frame:SetAttribute("Draggable", true)
    
    parent = parent or frame
    local dragging = false
    local dragInput, mousePos, framePos

    local function onInputBegan(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            mousePos = input.Position
            framePos = parent.Position
        end
    end

    local function onInputChanged(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end

    local function onInputMove(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            parent.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end
    end

    frame.InputBegan:Connect(onInputBegan)
    frame.InputChanged:Connect(onInputChanged)
    UserInputService.InputChanged:Connect(onInputMove)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
end

-- Library Management
local LibName = "ModernUI_"..tostring(math.random(1000, 9999))

function Library:ToggleUI()
    local ui = CoreGui:FindFirstChild(LibName)
    if ui then
        ui.Enabled = not ui.Enabled
    end
end

function Library:DestroyUI()
    local ui = CoreGui:FindFirstChild(LibName)
    if ui then
        local main = ui:FindFirstChild("Main")
        if main then
            Utility:TweenObject(main, {
                Size = UDim2.new(0, 0, 0, 0),
                BackgroundTransparency = 1
            }, Theme.Animations.Medium, function()
                ui:Destroy()
            end)
        else
            ui:Destroy()
        end
    end
end

-- Main Library Creation
function Library:Create(config)
    config = config or {}
    local title = config.Title or "Modern Executor"
    local subtitle = config.Subtitle or "Professional UI Library"
    
    -- Create main UI structure
    local UILibrary = Instance.new("ScreenGui")
    local Main = Instance.new("Frame")
    
    -- Glass morphism background
    local GlassBackground = Instance.new("Frame")
    
    -- Modern header
    local Header = Instance.new("Frame")
    local TitleLabel = Instance.new("TextLabel")
    local SubtitleLabel = Instance.new("TextLabel")
    local CloseButton = Instance.new("TextButton")
    local MinimizeButton = Instance.new("TextButton")
    
    -- Navigation sidebar
    local Navigation = Instance.new("Frame")
    local NavScrolling = Instance.new("ScrollingFrame")
    local NavLayout = Instance.new("UIListLayout")
    local NavPadding = Instance.new("UIPadding")
    
    -- Content area
    local ContentContainer = Instance.new("Frame")
    local TabsFolder = Instance.new("Folder")
    
    -- Setup main UI
    UILibrary.Name = LibName
    UILibrary.Parent = CoreGui
    UILibrary.ResetOnSpawn = false
    UILibrary.IgnoreGuiInset = true
    
    -- Main frame with responsive sizing
    Main.Name = "Main"
    Main.Parent = UILibrary
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = Theme.Background.Primary
    Main.BackgroundTransparency = 0.15
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 0, 0, 0)
    Main.BorderSizePixel = 0
    Main.ClipsDescendants = true
    
    Utility:CreateCorner(Main, Config.CornerRadius + 4)
    
    -- Glass background effect
    GlassBackground.Name = "GlassBackground"
    GlassBackground.Parent = Main
    GlassBackground.Size = UDim2.new(1, 0, 1, 0)
    GlassBackground.BackgroundColor3 = Theme.Background.Glass
    GlassBackground.BackgroundTransparency = 0.3
    GlassBackground.BorderSizePixel = 0
    GlassBackground.ZIndex = 1
    
    Utility:CreateCorner(GlassBackground, Config.CornerRadius + 4)
    Utility:CreateGradient(GlassBackground)
    
    -- Modern header
    Header.Name = "Header"
    Header.Parent = Main
    Header.BackgroundColor3 = Theme.Background.Secondary
    Header.BackgroundTransparency = 0.2
    Header.Size = UDim2.new(1, 0, 0, Config.HeaderHeight)
    Header.BorderSizePixel = 0
    Header.ZIndex = 2
    
    Utility:CreateCorner(Header, Config.CornerRadius + 4)
    
    -- Header extension
    local HeaderExtension = Instance.new("Frame")
    HeaderExtension.Name = "Extension"
    HeaderExtension.Parent = Header
    HeaderExtension.AnchorPoint = Vector2.new(0, 1)
    HeaderExtension.BackgroundColor3 = Theme.Background.Secondary
    HeaderExtension.BackgroundTransparency = 0.2
    HeaderExtension.Position = UDim2.new(0, 0, 1, 0)
    HeaderExtension.Size = UDim2.new(1, 0, 0, Config.CornerRadius)
    HeaderExtension.BorderSizePixel = 0
    HeaderExtension.ZIndex = 2
    
    -- Title and subtitle
    TitleLabel.Name = "Title"
    TitleLabel.Parent = Header
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Position = UDim2.new(0, Config.Padding, 0, 6)
    TitleLabel.Size = UDim2.new(0.6, 0, 0, Config.FontSizes.Large + 4)
    TitleLabel.Font = Theme.Fonts.Primary
    TitleLabel.Text = title
    TitleLabel.TextColor3 = Theme.Text.Primary
    TitleLabel.TextSize = Config.FontSizes.Large
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.ZIndex = 3
    
    if DeviceType ~= "Mobile" then
        SubtitleLabel.Name = "Subtitle"
        SubtitleLabel.Parent = Header
        SubtitleLabel.BackgroundTransparency = 1
        SubtitleLabel.Position = UDim2.new(0, Config.Padding, 0, Config.FontSizes.Large + 8)
        SubtitleLabel.Size = UDim2.new(0.6, 0, 0, Config.FontSizes.Small + 4)
        SubtitleLabel.Font = Theme.Fonts.Secondary
        SubtitleLabel.Text = subtitle
        SubtitleLabel.TextColor3 = Theme.Text.Secondary
        SubtitleLabel.TextSize = Config.FontSizes.Small
        SubtitleLabel.TextXAlignment = Enum.TextXAlignment.Left
        SubtitleLabel.ZIndex = 3
    end
    
    -- Modern close button
    local buttonSize = DeviceType == "Mobile" and 35 or 30
    CloseButton.Name = "Close"
    CloseButton.Parent = Header
    CloseButton.AnchorPoint = Vector2.new(1, 0.5)
    CloseButton.BackgroundColor3 = Theme.Accent.Error
    CloseButton.BackgroundTransparency = 0.8
    CloseButton.Position = UDim2.new(1, -Config.Padding, 0.5, 0)
    CloseButton.Size = UDim2.new(0, buttonSize, 0, buttonSize)
    CloseButton.Font = Theme.Fonts.Primary
    CloseButton.Text = "×"
    CloseButton.TextColor3 = Theme.Text.Primary
    CloseButton.TextSize = Config.FontSizes.Large
    CloseButton.BorderSizePixel = 0
    CloseButton.ZIndex = 3
    
    Utility:CreateCorner(CloseButton, Config.CornerRadius)
    Utility:CreateRipple(CloseButton, Theme.Accent.Error)
    
    -- Minimize button
    MinimizeButton.Name = "Minimize"
    MinimizeButton.Parent = Header
    MinimizeButton.AnchorPoint = Vector2.new(1, 0.5)
    MinimizeButton.BackgroundColor3 = Theme.Accent.Warning
    MinimizeButton.BackgroundTransparency = 0.8
    MinimizeButton.Position = UDim2.new(1, -Config.Padding - buttonSize - 8, 0.5, 0)
    MinimizeButton.Size = UDim2.new(0, buttonSize, 0, buttonSize)
    MinimizeButton.Font = Theme.Fonts.Primary
    MinimizeButton.Text = "−"
    MinimizeButton.TextColor3 = Theme.Text.Primary
    MinimizeButton.TextSize = Config.FontSizes.Medium
    MinimizeButton.BorderSizePixel = 0
    MinimizeButton.ZIndex = 3
    
    Utility:CreateCorner(MinimizeButton, Config.CornerRadius)
    Utility:CreateRipple(MinimizeButton, Theme.Accent.Warning)
    
    -- Navigation sidebar
    Navigation.Name = "Navigation"
    Navigation.Parent = Main
    Navigation.BackgroundColor3 = Theme.Background.Tertiary
    Navigation.BackgroundTransparency = 0.1
    Navigation.Position = UDim2.new(0, 0, 0, Config.HeaderHeight)
    Navigation.Size = UDim2.new(0, Config.NavWidth, 1, -Config.HeaderHeight)
    Navigation.BorderSizePixel = 0
    Navigation.ZIndex = 2
    
    Utility:CreateCorner(Navigation, Config.CornerRadius)
    
    -- Navigation scrolling frame
    NavScrolling.Name = "NavScrolling"
    NavScrolling.Parent = Navigation
    NavScrolling.BackgroundTransparency = 1
    NavScrolling.Size = UDim2.new(1, 0, 1, 0)
    NavScrolling.CanvasSize = UDim2.new(0, 0, 0, 0)
    NavScrolling.AutomaticCanvasSize = Enum.AutomaticSize.Y
    NavScrolling.ScrollBarThickness = DeviceType == "Mobile" and 6 or 4
    NavScrolling.ScrollBarImageColor3 = Theme.Accent.Primary
    NavScrolling.BorderSizePixel = 0
    NavScrolling.ZIndex = 3
    
    NavLayout.Parent = NavScrolling
    NavLayout.SortOrder = Enum.SortOrder.LayoutOrder
    NavLayout.Padding = UDim.new(0, 4)
    
    NavPadding.Parent = NavScrolling
    NavPadding.PaddingTop = UDim.new(0, Config.Padding)
    NavPadding.PaddingBottom = UDim.new(0, Config.Padding)
    NavPadding.PaddingLeft = UDim.new(0, Config.Padding)
    NavPadding.PaddingRight = UDim.new(0, Config.Padding)
    
    -- Content container
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Parent = Main
    ContentContainer.BackgroundColor3 = Theme.Background.Primary
    ContentContainer.BackgroundTransparency = 0.3
    ContentContainer.Position = UDim2.new(0, Config.NavWidth, 0, Config.HeaderHeight)
    ContentContainer.Size = UDim2.new(1, -Config.NavWidth, 1, -Config.HeaderHeight)
    ContentContainer.BorderSizePixel = 0
    ContentContainer.ZIndex = 2
    
    Utility:CreateCorner(ContentContainer, Config.CornerRadius)
    
    TabsFolder.Name = "TabsFolder"
    TabsFolder.Parent = ContentContainer
    
    -- Enable dragging
    Library:DraggingEnabled(Header, Main)
    
    -- Button events
    CloseButton.MouseButton1Click:Connect(function()
        Library:DestroyUI()
    end)
    
    local minimized = false
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        
        if minimized then
            Utility:TweenObject(Main, {
                Size = UDim2.new(0, Config.BaseSize.X * 0.8, 0, Config.HeaderHeight)
            }, Theme.Animations.Medium)
            MinimizeButton.Text = "+"
        else
            Utility:TweenObject(Main, {
                Size = UDim2.new(0, Config.BaseSize.X, 0, Config.BaseSize.Y)
            }, Theme.Animations.Medium)
            MinimizeButton.Text = "−"
        end
    end)
    
    -- Entrance animation
    Utility:TweenObject(Main, {
        Size = UDim2.new(0, Config.BaseSize.X, 0, Config.BaseSize.Y)
    }, Theme.Animations.Bounce)
    
    -- Tab system
    local Tabs = {}
    local firstTab = true
    
    function Tabs:Tab(config)
        config = config or {}
        local tabName = config.Name or "Tab"
        local tabIcon = config.Icon or "rbxassetid://7734053426"
        
        -- Create tab button
        local TabButton = Instance.new("TextButton")
        local TabIcon = Instance.new("ImageLabel")
        local TabGlow = Instance.new("Frame")
        
        -- Create tab content
        local TabContent = Instance.new("ScrollingFrame")
        local ContentLayout = Instance.new("UIListLayout")
        local ContentPadding = Instance.new("UIPadding")
        
        -- Tab button setup
        TabButton.Name = tabName.."_Button"
        TabButton.Parent = NavScrolling
        TabButton.BackgroundColor3 = Theme.Background.Glass
        TabButton.BackgroundTransparency = firstTab and 0.3 or 1
        TabButton.Size = UDim2.new(1, 0, 0, Config.ElementHeight)
        TabButton.Font = Theme.Fonts.Secondary
        TabButton.Text = "  "..tabName
        TabButton.TextColor3 = firstTab and Theme.Text.Primary or Theme.Text.Secondary
        TabButton.TextSize = Config.FontSizes.Medium
        TabButton.TextXAlignment = Enum.TextXAlignment.Left
        TabButton.BorderSizePixel = 0
        TabButton.ZIndex = 4
        
        Utility:CreateCorner(TabButton, Config.CornerRadius)
        
        -- Tab icon
        TabIcon.Name = "Icon"
        TabIcon.Parent = TabButton
        TabIcon.BackgroundTransparency = 1
        TabIcon.Position = UDim2.new(0, 10, 0.5, -8)
        TabIcon.Size = UDim2.new(0, 16, 0, 16)
        TabIcon.Image = tabIcon
        TabIcon.ImageColor3 = firstTab and Theme.Text.Primary or Theme.Text.Secondary
        TabIcon.ZIndex = 5
        
        -- Tab glow effect
        TabGlow.Name = "Glow"
        TabGlow.Parent = TabButton
        TabGlow.BackgroundColor3 = Theme.Accent.Primary
        TabGlow.BackgroundTransparency = firstTab and 0.8 or 1
        TabGlow.Size = UDim2.new(0, 3, 0.8, 0)
        TabGlow.Position = UDim2.new(0, 0, 0.1, 0)
        TabGlow.BorderSizePixel = 0
        TabGlow.ZIndex = 5
        
        Utility:CreateCorner(TabGlow, 2)
        
        -- Tab content setup
        TabContent.Name = tabName.."_Content"
        TabContent.Parent = TabsFolder
        TabContent.BackgroundTransparency = 1
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
        TabContent.ScrollBarThickness = DeviceType == "Mobile" and 8 or 6
        TabContent.ScrollBarImageColor3 = Theme.Accent.Primary
        TabContent.BorderSizePixel = 0
        TabContent.Visible = firstTab
        TabContent.ZIndex = 3
        
        ContentLayout.Parent = TabContent
        ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ContentLayout.Padding = UDim.new(0, Config.Padding)
        
        ContentPadding.Parent = TabContent
        ContentPadding.PaddingTop = UDim.new(0, Config.Padding)
        ContentPadding.PaddingBottom = UDim.new(0, Config.Padding)
        ContentPadding.PaddingLeft = UDim.new(0, Config.Padding)
        ContentPadding.PaddingRight = UDim.new(0, Config.Padding)
        
        -- Add ripple effect
        Utility:CreateRipple(TabButton, Theme.Accent.Primary)
        
        -- Tab switching logic
        TabButton.MouseButton1Click:Connect(function()
            -- Hide all tabs
            for _, tab in pairs(TabsFolder:GetChildren()) do
                if tab:IsA("ScrollingFrame") then
                    tab.Visible = false
                end
            end
            
            -- Reset all tab buttons
            for _, button in pairs(NavScrolling:GetChildren()) do
                if button:IsA("TextButton") and button.Name:find("_Button") then
                    Utility:TweenObject(button, {
                        BackgroundTransparency = 1,
                        TextColor3 = Theme.Text.Secondary
                    }, Theme.Animations.Fast)
                    
                    local icon = button:FindFirstChild("Icon")
                    if icon then
                        Utility:TweenObject(icon, {
                            ImageColor3 = Theme.Text.Secondary
                        }, Theme.Animations.Fast)
                    end
                    
                    local glow = button:FindFirstChild("Glow")
                    if glow then
                        Utility:TweenObject(glow, {
                            BackgroundTransparency = 1
                        }, Theme.Animations.Fast)
                    end
                end
            end
            
            -- Activate current tab
            TabContent.Visible = true
            Utility:TweenObject(TabButton, {
                BackgroundTransparency = 0.3,
                TextColor3 = Theme.Text.Primary
            }, Theme.Animations.Fast)
            
            Utility:TweenObject(TabIcon, {
                ImageColor3 = Theme.Text.Primary
            }, Theme.Animations.Fast)
            
            Utility:TweenObject(TabGlow, {
                BackgroundTransparency = 0.8
            }, Theme.Animations.Fast)
        end)
        
        firstTab = false
        
        -- Elements for this tab
        local Elements = {}
        
        function Elements:Section(name)
            name = name or "Section"
            
            local Section = Instance.new("Frame")
            local SectionTitle = Instance.new("TextLabel")
            local SectionLine = Instance.new("Frame")
            
            Section.Name = name.."_Section"
            Section.Parent = TabContent
            Section.BackgroundColor3 = Theme.Background.Glass
            Section.BackgroundTransparency = 0.7
            Section.Size = UDim2.new(1, 0, 0, Config.ElementHeight - 5)
            Section.BorderSizePixel = 0
            Section.ZIndex = 4
            
            Utility:CreateCorner(Section, Config.CornerRadius)
            
            SectionTitle.Name = "Title"
            SectionTitle.Parent = Section
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.Position = UDim2.new(0, Config.Padding, 0, 0)
            SectionTitle.Size = UDim2.new(1, -Config.Padding * 2, 1, 0)
            SectionTitle.Font = Theme.Fonts.Primary
            SectionTitle.Text = name
            SectionTitle.TextColor3 = Theme.Text.Primary
            SectionTitle.TextSize = Config.FontSizes.Medium
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            SectionTitle.ZIndex = 5
            
            SectionLine.Name = "Line"
            SectionLine.Parent = Section
            SectionLine.BackgroundColor3 = Theme.Accent.Primary
            SectionLine.BackgroundTransparency = 0.5
            SectionLine.Position = UDim2.new(0, Config.Padding, 1, -2)
            SectionLine.Size = UDim2.new(1, -Config.Padding * 2, 0, 2)
            SectionLine.BorderSizePixel = 0
            SectionLine.ZIndex = 5
            
            Utility:CreateCorner(SectionLine, 1)
            
            return Section
        end
        
        function Elements:InfoLabel(config)
            config = config or {}
            local text = config.Text or "Info Label"
            local textColor = config.TextColor or Theme.Text.Secondary
            
            local InfoFrame = Instance.new("Frame")
            local InfoLabel = Instance.new("TextLabel")
            local InfoIcon = Instance.new("TextLabel")
            
            InfoFrame.Name = "InfoLabel"
            InfoFrame.Parent = TabContent
            InfoFrame.BackgroundColor3 = Theme.Background.Glass
            InfoFrame.BackgroundTransparency = 0.8
            InfoFrame.Size = UDim2.new(1, 0, 0, Config.ElementHeight)
            InfoFrame.BorderSizePixel = 0
            InfoFrame.ZIndex = 4
            
            Utility:CreateCorner(InfoFrame, Config.CornerRadius)
            
            InfoIcon.Name = "Icon"
            InfoIcon.Parent = InfoFrame
            InfoIcon.BackgroundTransparency = 1
            InfoIcon.Position = UDim2.new(0, Config.Padding, 0, 0)
            InfoIcon.Size = UDim2.new(0, 20, 1, 0)
            InfoIcon.Font = Theme.Fonts.Primary
            InfoIcon.Text = "ℹ"
            InfoIcon.TextColor3 = Theme.Accent.Primary
            InfoIcon.TextSize = Config.FontSizes.Medium
            InfoIcon.TextXAlignment = Enum.TextXAlignment.Center
            InfoIcon.ZIndex = 5
            
            InfoLabel.Name = "Label"
            InfoLabel.Parent = InfoFrame
            InfoLabel.BackgroundTransparency = 1
            InfoLabel.Position = UDim2.new(0, Config.Padding + 25, 0, 0)
            InfoLabel.Size = UDim2.new(1, -Config.Padding - 30, 1, 0)
            InfoLabel.Font = Theme.Fonts.Secondary
            InfoLabel.Text = text
            InfoLabel.TextColor3 = textColor
            InfoLabel.TextSize = Config.FontSizes.Small
            InfoLabel.TextXAlignment = Enum.TextXAlignment.Left
            InfoLabel.TextWrapped = true
            InfoLabel.ZIndex = 5
            
            return InfoFrame
        end
        
        function Elements:Button(config)
            config = config or {}
            local buttonText = config.Text or "Button"
            local callback = config.Callback or function() end
            
            local Button = Instance.new("TextButton")
            
            Button.Name = buttonText.."_Button"
            Button.Parent = TabContent
            Button.BackgroundColor3 = Theme.Accent.Primary
            Button.BackgroundTransparency = 0.1
            Button.Size = UDim2.new(1, 0, 0, Config.ElementHeight)
            Button.Font = Theme.Fonts.Secondary
            Button.Text = buttonText
            Button.TextColor3 = Theme.Text.Primary
            Button.TextSize = Config.FontSizes.Medium
            Button.BorderSizePixel = 0
            Button.ZIndex = 4
            
            Utility:CreateCorner(Button, Config.CornerRadius)
            Utility:CreateGradient(Button, ColorSequence.new{
                ColorSequenceKeypoint.new(0, Theme.Accent.Primary),
                ColorSequenceKeypoint.new(1, Theme.Accent.Secondary)
            })
            Utility:CreateRipple(Button, Theme.Text.Primary)
            
            Button.MouseEnter:Connect(function()
                Utility:TweenObject(Button, {
                    BackgroundTransparency = 0.05
                }, Theme.Animations.Fast)
            end)
            
            Button.MouseLeave:Connect(function()
                Utility:TweenObject(Button, {
                    BackgroundTransparency = 0.1
                }, Theme.Animations.Fast)
            end)
            
            Button.MouseButton1Click:Connect(function()
                Utility:TweenObject(Button, {
                    Size = UDim2.new(1, -4, 0, Config.ElementHeight - 4)
                }, Theme.Animations.Fast)
                
                task.wait(0.1)
                
                Utility:TweenObject(Button, {
                    Size = UDim2.new(1, 0, 0, Config.ElementHeight)
                }, Theme.Animations.Fast)
                
                callback()
            end)
            
            return Button
        end
        
        function Elements:Toggle(config)
            config = config or {}
            local toggleText = config.Text or "Toggle"
            local defaultState = config.Default or false
            local callback = config.Callback or function() end
            
            local ToggleFrame = Instance.new("Frame")
            local ToggleLabel = Instance.new("TextLabel")
            local ToggleButton = Instance.new("TextButton")
            local ToggleIndicator = Instance.new("Frame")
            
            local toggled = defaultState
            
            ToggleFrame.Name = toggleText.."_Toggle"
            ToggleFrame.Parent = TabContent
            ToggleFrame.BackgroundColor3 = Theme.Background.Glass
            ToggleFrame.BackgroundTransparency = 0.7
            ToggleFrame.Size = UDim2.new(1, 0, 0, Config.ElementHeight)
            ToggleFrame.BorderSizePixel = 0
            ToggleFrame.ZIndex = 4
            
            Utility:CreateCorner(ToggleFrame, Config.CornerRadius)
            
            ToggleLabel.Name = "Label"
            ToggleLabel.Parent = ToggleFrame
            ToggleLabel.BackgroundTransparency = 1
            ToggleLabel.Position = UDim2.new(0, Config.Padding, 0, 0)
            ToggleLabel.Size = UDim2.new(1, -80, 1, 0)
            ToggleLabel.Font = Theme.Fonts.Secondary
            ToggleLabel.Text = toggleText
            ToggleLabel.TextColor3 = Theme.Text.Primary
            ToggleLabel.TextSize = Config.FontSizes.Medium
            ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            ToggleLabel.ZIndex = 5
            
            local toggleSize = DeviceType == "Mobile" and 55 or 50
            ToggleButton.Name = "Button"
            ToggleButton.Parent = ToggleFrame
            ToggleButton.AnchorPoint = Vector2.new(1, 0.5)
            ToggleButton.BackgroundColor3 = toggled and Theme.Accent.Primary or Theme.Background.Secondary
            ToggleButton.BackgroundTransparency = 0.2
            ToggleButton.Position = UDim2.new(1, -Config.Padding, 0.5, 0)
            ToggleButton.Size = UDim2.new(0, toggleSize, 0, toggleSize * 0.5)
            ToggleButton.Text = ""
            ToggleButton.BorderSizePixel = 0
            ToggleButton.ZIndex = 5
            
            Utility:CreateCorner(ToggleButton, toggleSize * 0.25)
            
            ToggleIndicator.Name = "Indicator"
            ToggleIndicator.Parent = ToggleButton
            ToggleIndicator.BackgroundColor3 = Theme.Text.Primary
            ToggleIndicator.Position = UDim2.new(0, toggled and (toggleSize * 0.55) or 3, 0.5, -(toggleSize * 0.15))
            ToggleIndicator.Size = UDim2.new(0, toggleSize * 0.3, 0, toggleSize * 0.3)
            ToggleIndicator.BorderSizePixel = 0
            ToggleIndicator.ZIndex = 6
            
            Utility:CreateCorner(ToggleIndicator, toggleSize * 0.15)
            
            ToggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                
                Utility:TweenObject(ToggleButton, {
                    BackgroundColor3 = toggled and Theme.Accent.Primary or Theme.Background.Secondary
                }, Theme.Animations.Medium)
                
                Utility:TweenObject(ToggleIndicator, {
                    Position = UDim2.new(0, toggled and (toggleSize * 0.55) or 3, 0.5, -(toggleSize * 0.15))
                }, Theme.Animations.Medium)
                
                callback(toggled)
            end)
            
            return ToggleFrame
        end
        
        function Elements:Dropdown(config)
            config = config or {}
            local dropdownText = config.Text or "Dropdown"
            local options = config.Options or {"Option 1", "Option 2", "Option 3"}
            local defaultOption = config.Default or options[1]
            local callback = config.Callback or function() end
            
            local DropdownFrame = Instance.new("Frame")
            local DropdownButton = Instance.new("TextButton")
            local DropdownLabel = Instance.new("TextLabel")
            local DropdownArrow = Instance.new("TextLabel")
            local DropdownList = Instance.new("Frame")
            local ListScrolling = Instance.new("ScrollingFrame")
            local ListLayout = Instance.new("UIListLayout")
            
            local isOpen = false
            local selectedOption = defaultOption
            
            DropdownFrame.Name = dropdownText.."_Dropdown"
            DropdownFrame.Parent = TabContent
            DropdownFrame.BackgroundTransparency = 1
            DropdownFrame.Size = UDim2.new(1, 0, 0, Config.ElementHeight)
            DropdownFrame.BorderSizePixel = 0
            DropdownFrame.ZIndex = 4
            DropdownFrame.ClipsDescendants = true
            
            DropdownButton.Name = "Button"
            DropdownButton.Parent = DropdownFrame
            DropdownButton.BackgroundColor3 = Theme.Background.Glass
            DropdownButton.BackgroundTransparency = 0.7
            DropdownButton.Size = UDim2.new(1, 0, 0, Config.ElementHeight)
            DropdownButton.Text = ""
            DropdownButton.BorderSizePixel = 0
            DropdownButton.ZIndex = 5
            
            Utility:CreateCorner(DropdownButton, Config.CornerRadius)
            Utility:CreateRipple(DropdownButton, Theme.Accent.Primary)
            
            DropdownLabel.Name = "Label"
            DropdownLabel.Parent = DropdownButton
            DropdownLabel.BackgroundTransparency = 1
            DropdownLabel.Position = UDim2.new(0, Config.Padding, 0, 0)
            DropdownLabel.Size = UDim2.new(1, -50, 1, 0)
            DropdownLabel.Font = Theme.Fonts.Secondary
            DropdownLabel.Text = dropdownText .. ": " .. selectedOption
            DropdownLabel.TextColor3 = Theme.Text.Primary
            DropdownLabel.TextSize = Config.FontSizes.Medium
            DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
            DropdownLabel.ZIndex = 6
            
            DropdownArrow.Name = "Arrow"
            DropdownArrow.Parent = DropdownButton
            DropdownArrow.AnchorPoint = Vector2.new(1, 0.5)
            DropdownArrow.BackgroundTransparency = 1
            DropdownArrow.Position = UDim2.new(1, -Config.Padding, 0.5, 0)
            DropdownArrow.Size = UDim2.new(0, 20, 0, 20)
            DropdownArrow.Font = Theme.Fonts.Primary
            DropdownArrow.Text = "▼"
            DropdownArrow.TextColor3 = Theme.Text.Secondary
            DropdownArrow.TextSize = Config.FontSizes.Small
            DropdownArrow.ZIndex = 6
            
            DropdownList.Name = "List"
            DropdownList.Parent = DropdownFrame
            DropdownList.BackgroundColor3 = Theme.Background.Tertiary
            DropdownList.BackgroundTransparency = 0.1
            DropdownList.Position = UDim2.new(0, 0, 0, Config.ElementHeight + 2)
            DropdownList.Size = UDim2.new(1, 0, 0, 0)
            DropdownList.BorderSizePixel = 0
            DropdownList.ZIndex = 7
            DropdownList.Visible = false
            
            Utility:CreateCorner(DropdownList, Config.CornerRadius)
            
            ListScrolling.Name = "Scrolling"
            ListScrolling.Parent = DropdownList
            ListScrolling.BackgroundTransparency = 1
            ListScrolling.Size = UDim2.new(1, 0, 1, 0)
            ListScrolling.CanvasSize = UDim2.new(0, 0, 0, 0)
            ListScrolling.AutomaticCanvasSize = Enum.AutomaticSize.Y
            ListScrolling.ScrollBarThickness = DeviceType == "Mobile" and 6 or 4
            ListScrolling.ScrollBarImageColor3 = Theme.Accent.Primary
            ListScrolling.BorderSizePixel = 0
            ListScrolling.ZIndex = 8
            
            ListLayout.Parent = ListScrolling
            ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            ListLayout.Padding = UDim.new(0, 2)
            
            local function createOption(optionText)
                local OptionButton = Instance.new("TextButton")
                
                OptionButton.Name = optionText
                OptionButton.Parent = ListScrolling
                OptionButton.BackgroundColor3 = Theme.Background.Glass
                OptionButton.BackgroundTransparency = 0.8
                OptionButton.Size = UDim2.new(1, 0, 0, Config.ElementHeight - 5)
                OptionButton.Font = Theme.Fonts.Secondary
                OptionButton.Text = optionText
                OptionButton.TextColor3 = Theme.Text.Primary
                OptionButton.TextSize = Config.FontSizes.Small
                OptionButton.BorderSizePixel = 0
                OptionButton.ZIndex = 9
                
                Utility:CreateCorner(OptionButton, Config.CornerRadius - 2)
                Utility:CreateRipple(OptionButton, Theme.Accent.Primary)
                
                OptionButton.MouseEnter:Connect(function()
                    Utility:TweenObject(OptionButton, {
                        BackgroundTransparency = 0.6
                    }, Theme.Animations.Fast)
                end)
                
                OptionButton.MouseLeave:Connect(function()
                    Utility:TweenObject(OptionButton, {
                        BackgroundTransparency = 0.8
                    }, Theme.Animations.Fast)
                end)
                
                OptionButton.MouseButton1Click:Connect(function()
                    selectedOption = optionText
                    DropdownLabel.Text = dropdownText .. ": " .. selectedOption
                    
                    -- Close dropdown
                    isOpen = false
                    Utility:TweenObject(DropdownList, {
                        Size = UDim2.new(1, 0, 0, 0)
                    }, Theme.Animations.Medium, function()
                        DropdownList.Visible = false
                    end)
                    
                    Utility:TweenObject(DropdownArrow, {
                        Rotation = 0
                    }, Theme.Animations.Medium)
                    
                    callback(selectedOption)
                end)
            end
            
            -- Create option buttons
            for _, option in ipairs(options) do
                createOption(option)
            end
            
            DropdownButton.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                
                if isOpen then
                    DropdownList.Visible = true
                    local listHeight = math.min(#options * (Config.ElementHeight - 3), Config.ElementHeight * 4)
                    DropdownFrame.Size = UDim2.new(1, 0, 0, Config.ElementHeight + listHeight + 2)
                    
                    Utility:TweenObject(DropdownList, {
                        Size = UDim2.new(1, 0, 0, listHeight)
                    }, Theme.Animations.Medium)
                    
                    Utility:TweenObject(DropdownArrow, {
                        Rotation = 180
                    }, Theme.Animations.Medium)
                else
                    Utility:TweenObject(DropdownList, {
                        Size = UDim2.new(1, 0, 0, 0)
                    }, Theme.Animations.Medium, function()
                        DropdownList.Visible = false
                        DropdownFrame.Size = UDim2.new(1, 0, 0, Config.ElementHeight)
                    end)
                    
                    Utility:TweenObject(DropdownArrow, {
                        Rotation = 0
                    }, Theme.Animations.Medium)
                end
            end)
            
            return DropdownFrame
        end
        
        return Elements
    end
    
    return Tabs
end

return Library
