local Library = {}
getgenv().UI_CONFIG = getgenv().UI_CONFIG or {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

-- Constants
local MOBILE_THRESHOLD = 768
local ANIMATION_SPEED = 0.3
local QUICK_ANIMATION = 0.15

-- Modern color palette
local Colors = {
    Primary = Color3.fromRGB(99, 102, 241),      -- Indigo
    Secondary = Color3.fromRGB(139, 92, 246),    -- Purple
    Background = Color3.fromRGB(15, 15, 23),     -- Dark blue-black
    Surface = Color3.fromRGB(30, 30, 46),        -- Dark surface
    SurfaceLight = Color3.fromRGB(45, 45, 69),   -- Lighter surface
    Text = Color3.fromRGB(255, 255, 255),        -- White text
    TextSecondary = Color3.fromRGB(156, 163, 175), -- Gray text
    Border = Color3.fromRGB(75, 85, 99),         -- Border gray
    Success = Color3.fromRGB(34, 197, 94),       -- Green
    Warning = Color3.fromRGB(251, 191, 36),      -- Yellow
    Error = Color3.fromRGB(239, 68, 68),         -- Red
    Glass = Color3.fromRGB(255, 255, 255)        -- For glassmorphism
}

-- Utility functions
local Utility = {}

function Utility:IsMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
end

function Utility:GetScreenSize()
    local viewport = workspace.CurrentCamera.ViewportSize
    return viewport.X, viewport.Y
end

function Utility:CreateTweenInfo(duration, style, direction)
    return TweenInfo.new(
        duration or ANIMATION_SPEED,
        style or Enum.EasingStyle.Quart,
        direction or Enum.EasingDirection.Out
    )
end

function Utility:Tween(object, properties, duration, style, direction)
    local tween = TweenService:Create(
        object,
        Utility:CreateTweenInfo(duration, style, direction),
        properties
    )
    tween:Play()
    return tween
end

function Utility:CreateGlow(parent, color, intensity)
    local glow = Instance.new("ImageLabel")
    glow.Name = "Glow"
    glow.Parent = parent
    glow.AnchorPoint = Vector2.new(0.5, 0.5)
    glow.Position = UDim2.new(0.5, 0, 0.5, 0)
    glow.Size = UDim2.new(1, 40, 1, 40)
    glow.BackgroundTransparency = 1
    glow.Image = "rbxassetid://8560915132"
    glow.ImageColor3 = color or Colors.Primary
    glow.ImageTransparency = 1 - (intensity or 0.3)
    glow.ZIndex = -1
    return glow
end

-- Enhanced dragging system
function Library:DraggingEnabled(frame, parent)
    parent = parent or frame
    
    local dragging = false
    local dragInput, mousePos, framePos
    
    local function updateInput(input)
        local delta = input.Position - mousePos
        local newPos = UDim2.new(
            framePos.X.Scale,
            framePos.X.Offset + delta.X,
            framePos.Y.Scale,
            framePos.Y.Offset + delta.Y
        )
        
        Utility:Tween(parent, {Position = newPos}, 0.1, Enum.EasingStyle.Quart)
    end
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            mousePos = input.Position
            framePos = parent.Position
            
            Utility:Tween(frame, {BackgroundTransparency = 0.1}, QUICK_ANIMATION)
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    Utility:Tween(frame, {BackgroundTransparency = 0}, QUICK_ANIMATION)
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateInput(input)
        end
    end)
end

-- Generate unique library name
local LibName = "ModernUI_" .. tostring(math.random(100000, 999999))

function Library:ToggleUI()
    local ui = CoreGui:FindFirstChild(LibName)
    if ui then
        ui.Enabled = not ui.Enabled
    end
end

function Library:DestroyUI()
    local ui = CoreGui:FindFirstChild(LibName)
    if ui then
        ui:Destroy()
    end
end

-- RESTORED ORIGINAL API
function Library:Create(TitleText, Size)
    TitleText = TitleText or "Modern UI"
    Size = Size or (Utility:IsMobile() and UDim2.new(0, 350, 0, 500) or UDim2.new(0, 480, 0, 360))
    
    -- Main UI structure
    local UILibrary = Instance.new("ScreenGui")
    local Main = Instance.new("Frame")
    local MainCorner = Instance.new("UICorner")
    local MainStroke = Instance.new("UIStroke")
    local TopBar = Instance.new("Frame")
    local TopBarCorner = Instance.new("UICorner")
    local TopBarGradient = Instance.new("UIGradient")
    local Title = Instance.new("TextLabel")
    local CloseButton = Instance.new("TextButton")
    local CloseIcon = Instance.new("ImageLabel")
    local MinimizeButton = Instance.new("TextButton")
    local MinimizeIcon = Instance.new("ImageLabel")
    local Navigation = Instance.new("Frame")
    local NavCorner = Instance.new("UICorner")
    local TabContainer = Instance.new("ScrollingFrame")
    local TabLayout = Instance.new("UIListLayout")
    local TabPadding = Instance.new("UIPadding")
    local ContentArea = Instance.new("Frame")
    local ContentCorner = Instance.new("UICorner")
    local TabsFolder = Instance.new("Folder")
    
    -- Setup main UI
    UILibrary.Name = LibName
    UILibrary.Parent = CoreGui
    UILibrary.ResetOnSpawn = false
    UILibrary.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main frame with glassmorphism
    Main.Name = "Main"
    Main.Parent = UILibrary
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = Size
    Main.BackgroundColor3 = Colors.Background
    Main.BackgroundTransparency = 0.1
    Main.BorderSizePixel = 0
    Main.ClipsDescendants = true
    
    MainCorner.CornerRadius = UDim.new(0, 16)
    MainCorner.Parent = Main
    
    MainStroke.Color = Colors.Border
    MainStroke.Thickness = 1
    MainStroke.Transparency = 0.5
    MainStroke.Parent = Main
    
    -- Add glow effect
    Utility:CreateGlow(Main, Colors.Primary, 0.2)
    
    -- Top bar with gradient
    TopBar.Name = "TopBar"
    TopBar.Parent = Main
    TopBar.Size = UDim2.new(1, 0, 0, 50)
    TopBar.BackgroundColor3 = Colors.Surface
    TopBar.BackgroundTransparency = 0.2
    TopBar.BorderSizePixel = 0
    
    TopBarCorner.CornerRadius = UDim.new(0, 16)
    TopBarCorner.Parent = TopBar
    
    TopBarGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Colors.Primary),
        ColorSequenceKeypoint.new(1, Colors.Secondary)
    }
    TopBarGradient.Rotation = 45
    TopBarGradient.Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.7),
        NumberSequenceKeypoint.new(1, 0.9)
    }
    TopBarGradient.Parent = TopBar
    
    -- Title with modern typography
    Title.Name = "Title"
    Title.Parent = TopBar
    Title.Position = UDim2.new(0, 20, 0, 0)
    Title.Size = UDim2.new(1, -100, 1, 0)
    Title.BackgroundTransparency = 1
    Title.Font = Enum.Font.GothamBold
    Title.Text = TitleText
    Title.TextColor3 = Colors.Text
    Title.TextSize = Utility:IsMobile() and 16 or 18
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.TextYAlignment = Enum.TextYAlignment.Center
    
    -- Modern close button
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = TopBar
    CloseButton.AnchorPoint = Vector2.new(1, 0.5)
    CloseButton.Position = UDim2.new(1, -15, 0.5, 0)
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.BackgroundColor3 = Colors.Error
    CloseButton.BackgroundTransparency = 0.8
    CloseButton.BorderSizePixel = 0
    CloseButton.Text = ""
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 8)
    closeCorner.Parent = CloseButton
    
    CloseIcon.Name = "Icon"
    CloseIcon.Parent = CloseButton
    CloseIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    CloseIcon.Position = UDim2.new(0.5, 0, 0.5, 0)
    CloseIcon.Size = UDim2.new(0, 16, 0, 16)
    CloseIcon.BackgroundTransparency = 1
    CloseIcon.Image = "rbxassetid://10747384394"
    CloseIcon.ImageColor3 = Colors.Text
    
    -- Minimize button
    MinimizeButton.Name = "MinimizeButton"
    MinimizeButton.Parent = TopBar
    MinimizeButton.AnchorPoint = Vector2.new(1, 0.5)
    MinimizeButton.Position = UDim2.new(1, -55, 0.5, 0)
    MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
    MinimizeButton.BackgroundColor3 = Colors.Warning
    MinimizeButton.BackgroundTransparency = 0.8
    MinimizeButton.BorderSizePixel = 0
    MinimizeButton.Text = ""
    
    local minimizeCorner = Instance.new("UICorner")
    minimizeCorner.CornerRadius = UDim.new(0, 8)
    minimizeCorner.Parent = MinimizeButton
    
    MinimizeIcon.Name = "Icon"
    MinimizeIcon.Parent = MinimizeButton
    MinimizeIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    MinimizeIcon.Position = UDim2.new(0.5, 0, 0.5, 0)
    MinimizeIcon.Size = UDim2.new(0, 16, 0, 16)
    MinimizeIcon.BackgroundTransparency = 1
    MinimizeIcon.Image = "rbxassetid://10734896206"
    MinimizeIcon.ImageColor3 = Colors.Text
    
    -- Navigation panel
    Navigation.Name = "Navigation"
    Navigation.Parent = Main
    Navigation.Position = UDim2.new(0, 10, 0, 60)
    Navigation.Size = UDim2.new(0, Utility:IsMobile() and 100 or 140, 1, -70)
    Navigation.BackgroundColor3 = Colors.Surface
    Navigation.BackgroundTransparency = 0.3
    Navigation.BorderSizePixel = 0
    
    NavCorner.CornerRadius = UDim.new(0, 12)
    NavCorner.Parent = Navigation
    
    -- Tab container
    TabContainer.Name = "TabContainer"
    TabContainer.Parent = Navigation
    TabContainer.Size = UDim2.new(1, 0, 1, 0)
    TabContainer.BackgroundTransparency = 1
    TabContainer.BorderSizePixel = 0
    TabContainer.ScrollBarThickness = 2
    TabContainer.ScrollBarImageColor3 = Colors.Primary
    TabContainer.AutomaticCanvasSize = Enum.AutomaticSize.Y
    TabContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
    
    TabLayout.Parent = TabContainer
    TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabLayout.Padding = UDim.new(0, 8)
    
    TabPadding.Parent = TabContainer
    TabPadding.PaddingTop = UDim.new(0, 15)
    TabPadding.PaddingBottom = UDim.new(0, 15)
    TabPadding.PaddingLeft = UDim.new(0, 10)
    TabPadding.PaddingRight = UDim.new(0, 10)
    
    -- Content area
    ContentArea.Name = "ContentArea"
    ContentArea.Parent = Main
    ContentArea.Position = UDim2.new(0, Utility:IsMobile() and 120 or 160, 0, 60)
    ContentArea.Size = UDim2.new(1, -(Utility:IsMobile() and 130 or 170), 1, -70)
    ContentArea.BackgroundColor3 = Colors.Surface
    ContentArea.BackgroundTransparency = 0.4
    ContentArea.BorderSizePixel = 0
    
    ContentCorner.CornerRadius = UDim.new(0, 12)
    ContentCorner.Parent = ContentArea
    
    TabsFolder.Name = "TabsFolder"
    TabsFolder.Parent = ContentArea
    
    -- Enable dragging
    Library:DraggingEnabled(TopBar, Main)
    
    -- Button interactions
    local function setupButton(button, icon, hoverColor)
        button.MouseEnter:Connect(function()
            Utility:Tween(button, {BackgroundTransparency = 0.3}, QUICK_ANIMATION)
        end)
        
        button.MouseLeave:Connect(function()
            Utility:Tween(button, {BackgroundTransparency = 0.8}, QUICK_ANIMATION)
        end)
        
        button.MouseButton1Down:Connect(function()
            Utility:Tween(button, {Size = UDim2.new(0, 28, 0, 28)}, 0.1)
        end)
        
        button.MouseButton1Up:Connect(function()
            Utility:Tween(button, {Size = UDim2.new(0, 30, 0, 30)}, 0.1)
        end)
    end
    
    setupButton(CloseButton, CloseIcon, Colors.Error)
    setupButton(MinimizeButton, MinimizeIcon, Colors.Warning)
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        Utility:Tween(Main, {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }, ANIMATION_SPEED, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        
        spawn(function()
            wait(ANIMATION_SPEED)
            Library:DestroyUI()
        end)
    end)
    
    -- Minimize functionality
    local minimized = false
    MinimizeButton.MouseButton1Click:Connect(function()
        if not minimized then
            Utility:Tween(Main, {Size = UDim2.new(0, Size.X.Offset, 0, 50)}, ANIMATION_SPEED)
            Navigation.Visible = false
            ContentArea.Visible = false
            minimized = true
        else
            Utility:Tween(Main, {Size = Size}, ANIMATION_SPEED)
            Navigation.Visible = true
            ContentArea.Visible = true
            minimized = false
        end
    end)
    
    local firstTab = true
    
    local Tabs = {}
    
    function Tabs:Tab(TabText, TabIconUrl)
        TabText = TabText or "Tab"
        TabIconUrl = TabIconUrl or "rbxassetid://10734950309"
        
        -- Tab button
        local TabButton = Instance.new("TextButton")
        local TabCorner = Instance.new("UICorner")
        local TabIcon = Instance.new("ImageLabel")
        local TabLabel = Instance.new("TextLabel")
        local TabGlow = Instance.new("Frame")
        local TabGlowCorner = Instance.new("UICorner")
        
        -- Tab content
        local TabContent = Instance.new("ScrollingFrame")
        local ContentLayout = Instance.new("UIListLayout")
        local ContentPadding = Instance.new("UIPadding")
        
        -- Tab button setup
        TabButton.Name = TabText .. "_Button"
        TabButton.Parent = TabContainer
        TabButton.Size = UDim2.new(1, 0, 0, Utility:IsMobile() and 45 or 50)
        TabButton.BackgroundColor3 = Colors.SurfaceLight
        TabButton.BackgroundTransparency = firstTab and 0.3 or 1
        TabButton.BorderSizePixel = 0
        TabButton.Text = ""
        
        TabCorner.CornerRadius = UDim.new(0, 10)
        TabCorner.Parent = TabButton
        
        TabGlow.Name = "Glow"
        TabGlow.Parent = TabButton
        TabGlow.Size = UDim2.new(0, 4, 1, 0)
        TabGlow.BackgroundColor3 = Colors.Primary
        TabGlow.BackgroundTransparency = firstTab and 0 or 1
        TabGlow.BorderSizePixel = 0
        
        TabGlowCorner.CornerRadius = UDim.new(0, 2)
        TabGlowCorner.Parent = TabGlow
        
        TabIcon.Name = "Icon"
        TabIcon.Parent = TabButton
        TabIcon.Position = UDim2.new(0, 15, 0.5, -10)
        TabIcon.Size = UDim2.new(0, 20, 0, 20)
        TabIcon.BackgroundTransparency = 1
        TabIcon.Image = TabIconUrl
        TabIcon.ImageColor3 = firstTab and Colors.Primary or Colors.TextSecondary
        
        if not Utility:IsMobile() then
            TabLabel.Name = "Label"
            TabLabel.Parent = TabButton
            TabLabel.Position = UDim2.new(0, 45, 0, 0)
            TabLabel.Size = UDim2.new(1, -50, 1, 0)
            TabLabel.BackgroundTransparency = 1
            TabLabel.Font = Enum.Font.Gotham
            TabLabel.Text = TabText
            TabLabel.TextColor3 = firstTab and Colors.Text or Colors.TextSecondary
            TabLabel.TextSize = 12
            TabLabel.TextXAlignment = Enum.TextXAlignment.Left
        end
        
        -- Tab content setup
        TabContent.Name = TabText .. "_Content"
        TabContent.Parent = TabsFolder
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.BackgroundTransparency = 1
        TabContent.BorderSizePixel = 0
        TabContent.ScrollBarThickness = 3
        TabContent.ScrollBarImageColor3 = Colors.Primary
        TabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContent.Visible = firstTab
        
        ContentLayout.Parent = TabContent
        ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ContentLayout.Padding = UDim.new(0, 10)
        
        ContentPadding.Parent = TabContent
        ContentPadding.PaddingTop = UDim.new(0, 15)
        ContentPadding.PaddingBottom = UDim.new(0, 15)
        ContentPadding.PaddingLeft = UDim.new(0, 15)
        ContentPadding.PaddingRight = UDim.new(0, 15)
        
        -- Tab switching logic
        TabButton.MouseButton1Click:Connect(function()
            -- Hide all tabs
            for _, tab in pairs(TabsFolder:GetChildren()) do
                if tab:IsA("ScrollingFrame") then
                    tab.Visible = false
                end
            end
            
            -- Reset all tab buttons
            for _, button in pairs(TabContainer:GetChildren()) do
                if button:IsA("TextButton") then
                    Utility:Tween(button, {BackgroundTransparency = 1}, QUICK_ANIMATION)
                    local glow = button:FindFirstChild("Glow")
                    if glow then
                        Utility:Tween(glow, {BackgroundTransparency = 1}, QUICK_ANIMATION)
                    end
                    local icon = button:FindFirstChild("Icon")
                    if icon then
                        Utility:Tween(icon, {ImageColor3 = Colors.TextSecondary}, QUICK_ANIMATION)
                    end
                    local label = button:FindFirstChild("Label")
                    if label then
                        Utility:Tween(label, {TextColor3 = Colors.TextSecondary}, QUICK_ANIMATION)
                    end
                end
            end
            
            -- Activate current tab
            TabContent.Visible = true
            Utility:Tween(TabButton, {BackgroundTransparency = 0.3}, QUICK_ANIMATION)
            Utility:Tween(TabGlow, {BackgroundTransparency = 0}, QUICK_ANIMATION)
            Utility:Tween(TabIcon, {ImageColor3 = Colors.Primary}, QUICK_ANIMATION)
            if TabLabel then
                Utility:Tween(TabLabel, {TextColor3 = Colors.Text}, QUICK_ANIMATION)
            end
        end)
        
        -- Hover effects
        TabButton.MouseEnter:Connect(function()
            if TabContent.Visible then return end
            Utility:Tween(TabButton, {BackgroundTransparency = 0.7}, QUICK_ANIMATION)
            Utility:Tween(TabIcon, {ImageColor3 = Colors.Text}, QUICK_ANIMATION)
            if TabLabel then
                Utility:Tween(TabLabel, {TextColor3 = Colors.Text}, QUICK_ANIMATION)
            end
        end)
        
        TabButton.MouseLeave:Connect(function()
            if TabContent.Visible then return end
            Utility:Tween(TabButton, {BackgroundTransparency = 1}, QUICK_ANIMATION)
            Utility:Tween(TabIcon, {ImageColor3 = Colors.TextSecondary}, QUICK_ANIMATION)
            if TabLabel then
                Utility:Tween(TabLabel, {TextColor3 = Colors.TextSecondary}, QUICK_ANIMATION)
            end
        end)
        
        firstTab = false
        
        local Elements = {}
        
        function Elements:Section(title)
            title = title or "Section"
            
            local Section = Instance.new("Frame")
            local SectionCorner = Instance.new("UICorner")
            local SectionHeader = Instance.new("Frame")
            local SectionHeaderCorner = Instance.new("UICorner")
            local SectionTitle = Instance.new("TextLabel")
            local SectionLine = Instance.new("Frame")
            local SectionLineCorner = Instance.new("UICorner")
            local SectionContent = Instance.new("Frame")
            local SectionLayout = Instance.new("UIListLayout")
            local SectionPadding = Instance.new("UIPadding")
            
            Section.Name = title .. "_Section"
            Section.Parent = TabContent
            Section.Size = UDim2.new(1, 0, 0, 0)
            Section.BackgroundColor3 = Colors.SurfaceLight
            Section.BackgroundTransparency = 0.5
            Section.BorderSizePixel = 0
            Section.AutomaticSize = Enum.AutomaticSize.Y
            
            SectionCorner.CornerRadius = UDim.new(0, 12)
            SectionCorner.Parent = Section
            
            SectionHeader.Name = "Header"
            SectionHeader.Parent = Section
            SectionHeader.Size = UDim2.new(1, 0, 0, 35)
            SectionHeader.BackgroundTransparency = 1
            SectionHeader.BorderSizePixel = 0
            
            SectionHeaderCorner.CornerRadius = UDim.new(0, 12)
            SectionHeaderCorner.Parent = SectionHeader
            
            SectionTitle.Name = "Title"
            SectionTitle.Parent = SectionHeader
            SectionTitle.Position = UDim2.new(0, 15, 0, 0)
            SectionTitle.Size = UDim2.new(1, -30, 1, 0)
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.Font = Enum.Font.GothamBold
            SectionTitle.Text = title
            SectionTitle.TextColor3 = Colors.Text
            SectionTitle.TextSize = 14
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            
            SectionLine.Name = "Line"
            SectionLine.Parent = Section
            SectionLine.Position = UDim2.new(0, 15, 0, 30)
            SectionLine.Size = UDim2.new(1, -30, 0, 2)
            SectionLine.BackgroundColor3 = Colors.Primary
            SectionLine.BorderSizePixel = 0
            
            SectionLineCorner.CornerRadius = UDim.new(0, 1)
            SectionLineCorner.Parent = SectionLine
            
            SectionContent.Name = "Content"
            SectionContent.Parent = Section
            SectionContent.Position = UDim2.new(0, 0, 0, 35)
            SectionContent.Size = UDim2.new(1, 0, 0, 0)
            SectionContent.BackgroundTransparency = 1
            SectionContent.AutomaticSize = Enum.AutomaticSize.Y
            
            SectionLayout.Parent = SectionContent
            SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
            SectionLayout.Padding = UDim.new(0, 8)
            
            SectionPadding.Parent = SectionContent
            SectionPadding.PaddingTop = UDim.new(0, 10)
            SectionPadding.PaddingBottom = UDim.new(0, 15)
            SectionPadding.PaddingLeft = UDim.new(0, 15)
            SectionPadding.PaddingRight = UDim.new(0, 15)
            
            local SectionElements = {}
            
            function SectionElements:Button(text, callback)
                text = text or "Button"
                callback = callback or function() end
                
                local Button = Instance.new("TextButton")
                local ButtonCorner = Instance.new("UICorner")
                local ButtonGradient = Instance.new("UIGradient")
                local ButtonGlow = Utility:CreateGlow(Button, Colors.Primary, 0)
                
                Button.Name = text .. "_Button"
                Button.Parent = SectionContent
                Button.Size = UDim2.new(1, 0, 0, 35)
                Button.BackgroundColor3 = Colors.Primary
                Button.BorderSizePixel = 0
                Button.Font = Enum.Font.GothamBold
                Button.Text = text
                Button.TextColor3 = Colors.Text
                Button.TextSize = 13
                
                ButtonCorner.CornerRadius = UDim.new(0, 8)
                ButtonCorner.Parent = Button
                
                ButtonGradient.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Colors.Primary),
                    ColorSequenceKeypoint.new(1, Colors.Secondary)
                }
                ButtonGradient.Rotation = 45
                ButtonGradient.Parent = Button
                
                -- Button interactions
                Button.MouseEnter:Connect(function()
                    Utility:Tween(Button, {Size = UDim2.new(1, 0, 0, 37)}, QUICK_ANIMATION)
                    Utility:Tween(ButtonGlow, {ImageTransparency = 0.7}, QUICK_ANIMATION)
                end)
                
                Button.MouseLeave:Connect(function()
                    Utility:Tween(Button, {Size = UDim2.new(1, 0, 0, 35)}, QUICK_ANIMATION)
                    Utility:Tween(ButtonGlow, {ImageTransparency = 1}, QUICK_ANIMATION)
                end)
                
                Button.MouseButton1Down:Connect(function()
                    Utility:Tween(Button, {Size = UDim2.new(1, 0, 0, 33)}, 0.1)
                end)
                
                Button.MouseButton1Up:Connect(function()
                    Utility:Tween(Button, {Size = UDim2.new(1, 0, 0, 35)}, 0.1)
                end)
                
                Button.MouseButton1Click:Connect(function()
                    spawn(function()
                        callback()
                    end)
                end)
                
                return Button
            end
            
            function SectionElements:Toggle(text, default, callback)
                text = text or "Toggle"
                default = default or false
                callback = callback or function() end
                
                local Toggle = Instance.new("Frame")
                local ToggleCorner = Instance.new("UICorner")
                local ToggleLabel = Instance.new("TextLabel")
                local ToggleButton = Instance.new("TextButton")
                local ToggleButtonCorner = Instance.new("UICorner")
                local ToggleIndicator = Instance.new("Frame")
                local IndicatorCorner = Instance.new("UICorner")
                
                local toggled = default
                
                Toggle.Name = text .. "_Toggle"
                Toggle.Parent = SectionContent
                Toggle.Size = UDim2.new(1, 0, 0, 35)
                Toggle.BackgroundColor3 = Colors.SurfaceLight
                Toggle.BackgroundTransparency = 0.3
                Toggle.BorderSizePixel = 0
                
                ToggleCorner.CornerRadius = UDim.new(0, 8)
                ToggleCorner.Parent = Toggle
                
                ToggleLabel.Name = "Label"
                ToggleLabel.Parent = Toggle
                ToggleLabel.Position = UDim2.new(0, 15, 0, 0)
                ToggleLabel.Size = UDim2.new(1, -70, 1, 0)
                ToggleLabel.BackgroundTransparency = 1
                ToggleLabel.Font = Enum.Font.Gotham
                ToggleLabel.Text = text
                ToggleLabel.TextColor3 = Colors.Text
                ToggleLabel.TextSize = 13
                ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleButton.Name = "Button"
                ToggleButton.Parent = Toggle
                ToggleButton.AnchorPoint = Vector2.new(1, 0.5)
                ToggleButton.Position = UDim2.new(1, -15, 0.5, 0)
                ToggleButton.Size = UDim2.new(0, 45, 0, 20)
                ToggleButton.BackgroundColor3 = toggled and Colors.Primary or Colors.Border
                ToggleButton.BorderSizePixel = 0
                ToggleButton.Text = ""
                
                ToggleButtonCorner.CornerRadius = UDim.new(0, 10)
                ToggleButtonCorner.Parent = ToggleButton
                
                ToggleIndicator.Name = "Indicator"
                ToggleIndicator.Parent = ToggleButton
                ToggleIndicator.AnchorPoint = Vector2.new(0, 0.5)
                ToggleIndicator.Position = UDim2.new(0, toggled and 27 or 3, 0.5, 0)
                ToggleIndicator.Size = UDim2.new(0, 16, 0, 16)
                ToggleIndicator.BackgroundColor3 = Colors.Text
                ToggleIndicator.BorderSizePixel = 0
                
                IndicatorCorner.CornerRadius = UDim.new(0, 8)
                IndicatorCorner.Parent = ToggleIndicator
                
                -- Toggle functionality
                ToggleButton.MouseButton1Click:Connect(function()
                    toggled = not toggled
                    
                    Utility:Tween(ToggleButton, {
                        BackgroundColor3 = toggled and Colors.Primary or Colors.Border
                    }, QUICK_ANIMATION)
                    
                    Utility:Tween(ToggleIndicator, {
                        Position = UDim2.new(0, toggled and 27 or 3, 0.5, 0)
                    }, QUICK_ANIMATION)
                    
                    spawn(function()
                        callback(toggled)
                    end)
                end)
                
                -- Hover effects
                ToggleButton.MouseEnter:Connect(function()
                    Utility:Tween(ToggleIndicator, {Size = UDim2.new(0, 18, 0, 18)}, QUICK_ANIMATION)
                end)
                
                ToggleButton.MouseLeave:Connect(function()
                    Utility:Tween(ToggleIndicator, {Size = UDim2.new(0, 16, 0, 16)}, QUICK_ANIMATION)
                end)
                
                return {
                    SetValue = function(value)
                        toggled = value
                        Utility:Tween(ToggleButton, {
                            BackgroundColor3 = toggled and Colors.Primary or Colors.Border
                        }, QUICK_ANIMATION)
                        Utility:Tween(ToggleIndicator, {
                            Position = UDim2.new(0, toggled and 27 or 3, 0.5, 0)
                        }, QUICK_ANIMATION)
                    end,
                    GetValue = function()
                        return toggled
                    end
                }
            end
            
            function SectionElements:Slider(text, min, max, default, callback)
                text = text or "Slider"
                min = min or 0
                max = max or 100
                default = default or min
                callback = callback or function() end
                
                local Slider = Instance.new("Frame")
                local SliderCorner = Instance.new("UICorner")
                local SliderLabel = Instance.new("TextLabel")
                local SliderValue = Instance.new("TextLabel")
                local SliderTrack = Instance.new("Frame")
                local TrackCorner = Instance.new("UICorner")
                local SliderFill = Instance.new("Frame")
                local FillCorner = Instance.new("UICorner")
                local SliderHandle = Instance.new("TextButton")
                local HandleCorner = Instance.new("UICorner")
                
                local currentValue = default
                local dragging = false
                
                Slider.Name = text .. "_Slider"
                Slider.Parent = SectionContent
                Slider.Size = UDim2.new(1, 0, 0, 50)
                Slider.BackgroundColor3 = Colors.SurfaceLight
                Slider.BackgroundTransparency = 0.3
                Slider.BorderSizePixel = 0
                
                SliderCorner.CornerRadius = UDim.new(0, 8)
                SliderCorner.Parent = Slider
                
                SliderLabel.Name = "Label"
                SliderLabel.Parent = Slider
                SliderLabel.Position = UDim2.new(0, 15, 0, 5)
                SliderLabel.Size = UDim2.new(0.7, 0, 0, 20)
                SliderLabel.BackgroundTransparency = 1
                SliderLabel.Font = Enum.Font.Gotham
                SliderLabel.Text = text
                SliderLabel.TextColor3 = Colors.Text
                SliderLabel.TextSize = 13
                SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderValue.Name = "Value"
                SliderValue.Parent = Slider
                SliderValue.Position = UDim2.new(0.7, 0, 0, 5)
                SliderValue.Size = UDim2.new(0.3, -15, 0, 20)
                SliderValue.BackgroundTransparency = 1
                SliderValue.Font = Enum.Font.GothamBold
                SliderValue.Text = tostring(currentValue)
                SliderValue.TextColor3 = Colors.Primary
                SliderValue.TextSize = 13
                SliderValue.TextXAlignment = Enum.TextXAlignment.Right
                
                SliderTrack.Name = "Track"
                SliderTrack.Parent = Slider
                SliderTrack.Position = UDim2.new(0, 15, 0, 30)
                SliderTrack.Size = UDim2.new(1, -30, 0, 6)
                SliderTrack.BackgroundColor3 = Colors.Border
                SliderTrack.BorderSizePixel = 0
                
                TrackCorner.CornerRadius = UDim.new(0, 3)
                TrackCorner.Parent = SliderTrack
                
                SliderFill.Name = "Fill"
                SliderFill.Parent = SliderTrack
                SliderFill.Size = UDim2.new((currentValue - min) / (max - min), 0, 1, 0)
                SliderFill.BackgroundColor3 = Colors.Primary
                SliderFill.BorderSizePixel = 0
                
                FillCorner.CornerRadius = UDim.new(0, 3)
                FillCorner.Parent = SliderFill
                
                SliderHandle.Name = "Handle"
                SliderHandle.Parent = SliderTrack
                SliderHandle.AnchorPoint = Vector2.new(0.5, 0.5)
                SliderHandle.Position = UDim2.new((currentValue - min) / (max - min), 0, 0.5, 0)
                SliderHandle.Size = UDim2.new(0, 16, 0, 16)
                SliderHandle.BackgroundColor3 = Colors.Text
                SliderHandle.BorderSizePixel = 0
                SliderHandle.Text = ""
                
                HandleCorner.CornerRadius = UDim.new(0, 8)
                HandleCorner.Parent = SliderHandle
                
                local function updateSlider(input)
                    local pos = math.clamp((input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
                    currentValue = math.floor(min + (max - min) * pos)
                    
                    SliderValue.Text = tostring(currentValue)
                    
                    Utility:Tween(SliderFill, {Size = UDim2.new(pos, 0, 1, 0)}, 0.1)
                    Utility:Tween(SliderHandle, {Position = UDim2.new(pos, 0, 0.5, 0)}, 0.1)
                    
                    spawn(function()
                        callback(currentValue)
                    end)
                end
                
                SliderHandle.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or
                       input.UserInputType == Enum.UserInputType.Touch then
                        dragging = true
                        Utility:Tween(SliderHandle, {Size = UDim2.new(0, 20, 0, 20)}, QUICK_ANIMATION)
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or
                       input.UserInputType == Enum.UserInputType.Touch) then
                        updateSlider(input)
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or
                       input.UserInputType == Enum.UserInputType.Touch then
                        dragging = false
                        Utility:Tween(SliderHandle, {Size = UDim2.new(0, 16, 0, 16)}, QUICK_ANIMATION)
                    end
                end)
                
                SliderTrack.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or
                       input.UserInputType == Enum.UserInputType.Touch then
                        updateSlider(input)
                    end
                end)
                
                return {
                    SetValue = function(value)
                        currentValue = math.clamp(value, min, max)
                        SliderValue.Text = tostring(currentValue)
                        local percent = (currentValue - min) / (max - min)
                        Utility:Tween(SliderFill, {Size = UDim2.new(percent, 0, 1, 0)}, QUICK_ANIMATION)
                        Utility:Tween(SliderHandle, {Position = UDim2.new(percent, 0, 0.5, 0)}, QUICK_ANIMATION)
                    end,
                    GetValue = function()
                        return currentValue
                    end
                }
            end
            
            -- FIXED DROPDOWN
            function SectionElements:Dropdown(text, options, default, callback)
                text = text or "Dropdown"
                options = options or {"Option 1", "Option 2", "Option 3"}
                default = default or options[1]
                callback = callback or function() end
                
                local Dropdown = Instance.new("Frame")
                local DropdownCorner = Instance.new("UICorner")
                local DropdownButton = Instance.new("TextButton")
                local DropdownButtonCorner = Instance.new("UICorner")
                local DropdownLabel = Instance.new("TextLabel")
                local DropdownValue = Instance.new("TextLabel")
                local DropdownIcon = Instance.new("ImageLabel")
                local DropdownList = Instance.new("Frame")
                local DropdownListCorner = Instance.new("UICorner")
                local DropdownListStroke = Instance.new("UIStroke")
                local DropdownScroll = Instance.new("ScrollingFrame")
                local DropdownLayout = Instance.new("UIListLayout")
                local DropdownPadding = Instance.new("UIPadding")
                
                local currentOption = default
                local isOpen = false
                
                Dropdown.Name = text .. "_Dropdown"
                Dropdown.Parent = SectionContent
                Dropdown.Size = UDim2.new(1, 0, 0, 35)
                Dropdown.BackgroundTransparency = 1
                Dropdown.BorderSizePixel = 0
                
                DropdownCorner.CornerRadius = UDim.new(0, 8)
                DropdownCorner.Parent = Dropdown
                
                DropdownButton.Name = "Button"
                DropdownButton.Parent = Dropdown
                DropdownButton.Size = UDim2.new(1, 0, 0, 35)
                DropdownButton.BackgroundColor3 = Colors.SurfaceLight
                DropdownButton.BackgroundTransparency = 0.3
                DropdownButton.BorderSizePixel = 0
                DropdownButton.Text = ""
                
                DropdownButtonCorner.CornerRadius = UDim.new(0, 8)
                DropdownButtonCorner.Parent = DropdownButton
                
                DropdownLabel.Name = "Label"
                DropdownLabel.Parent = DropdownButton
                DropdownLabel.Position = UDim2.new(0, 15, 0, 0)
                DropdownLabel.Size = UDim2.new(0.5, -15, 1, 0)
                DropdownLabel.BackgroundTransparency = 1
                DropdownLabel.Font = Enum.Font.Gotham
                DropdownLabel.Text = text
                DropdownLabel.TextColor3 = Colors.Text
                DropdownLabel.TextSize = 13
                DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownValue.Name = "Value"
                DropdownValue.Parent = DropdownButton
                DropdownValue.Position = UDim2.new(0.5, 0, 0, 0)
                DropdownValue.Size = UDim2.new(0.5, -35, 1, 0)
                DropdownValue.BackgroundTransparency = 1
                DropdownValue.Font = Enum.Font.Gotham
                DropdownValue.Text = currentOption
                DropdownValue.TextColor3 = Colors.Primary
                DropdownValue.TextSize = 13
                DropdownValue.TextXAlignment = Enum.TextXAlignment.Right
                DropdownValue.TextTruncate = Enum.TextTruncate.AtEnd
                
                DropdownIcon.Name = "Icon"
                DropdownIcon.Parent = DropdownButton
                DropdownIcon.AnchorPoint = Vector2.new(1, 0.5)
                DropdownIcon.Position = UDim2.new(1, -15, 0.5, 0)
                DropdownIcon.Size = UDim2.new(0, 16, 0, 16)
                DropdownIcon.BackgroundTransparency = 1
                DropdownIcon.Image = "rbxassetid://10709790948"
                DropdownIcon.ImageColor3 = Colors.TextSecondary
                DropdownIcon.Rotation = 0
                
                DropdownList.Name = "List"
                DropdownList.Parent = Dropdown
                DropdownList.Position = UDim2.new(0, 0, 1, 5)
                DropdownList.Size = UDim2.new(1, 0, 0, 0)
                DropdownList.BackgroundColor3 = Colors.Surface
                DropdownList.BackgroundTransparency = 0.1
                DropdownList.BorderSizePixel = 0
                DropdownList.Visible = false
                DropdownList.ZIndex = 10
                
                DropdownListCorner.CornerRadius = UDim.new(0, 8)
                DropdownListCorner.Parent = DropdownList
                
                DropdownListStroke.Color = Colors.Border
                DropdownListStroke.Thickness = 1
                DropdownListStroke.Transparency = 0.5
                DropdownListStroke.Parent = DropdownList
                
                DropdownScroll.Name = "Scroll"
                DropdownScroll.Parent = DropdownList
                DropdownScroll.Size = UDim2.new(1, 0, 1, 0)
                DropdownScroll.BackgroundTransparency = 1
                DropdownScroll.BorderSizePixel = 0
                DropdownScroll.ScrollBarThickness = 2
                DropdownScroll.ScrollBarImageColor3 = Colors.Primary
                DropdownScroll.AutomaticCanvasSize = Enum.AutomaticSize.Y
                DropdownScroll.CanvasSize = UDim2.new(0, 0, 0, 0)
                DropdownScroll.ScrollingDirection = Enum.ScrollingDirection.Y
                
                DropdownLayout.Parent = DropdownScroll
                DropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownLayout.Padding = UDim.new(0, 2)
                
                DropdownPadding.Parent = DropdownScroll
                DropdownPadding.PaddingTop = UDim.new(0, 5)
                DropdownPadding.PaddingBottom = UDim.new(0, 5)
                DropdownPadding.PaddingLeft = UDim.new(0, 5)
                DropdownPadding.PaddingRight = UDim.new(0, 5)
                
                -- Create options
                local function createOptions()
                    -- Clear existing options
                    for _, child in pairs(DropdownScroll:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    -- Create new options
                    for i, option in ipairs(options) do
                        local OptionButton = Instance.new("TextButton")
                        local OptionCorner = Instance.new("UICorner")
                        
                        OptionButton.Name = "Option_" .. i
                        OptionButton.Parent = DropdownScroll
                        OptionButton.Size = UDim2.new(1, 0, 0, 30)
                        OptionButton.BackgroundColor3 = Colors.SurfaceLight
                        OptionButton.BackgroundTransparency = option == currentOption and 0.3 or 1
                        OptionButton.BorderSizePixel = 0
                        OptionButton.Font = Enum.Font.Gotham
                        OptionButton.Text = option
                        OptionButton.TextColor3 = option == currentOption and Colors.Primary or Colors.Text
                        OptionButton.TextSize = 12
                        OptionButton.TextTruncate = Enum.TextTruncate.AtEnd
                        
                        OptionCorner.CornerRadius = UDim.new(0, 6)
                        OptionCorner.Parent = OptionButton
                        
                        -- Option interactions
                        OptionButton.MouseEnter:Connect(function()
                            if option ~= currentOption then
                                Utility:Tween(OptionButton, {BackgroundTransparency = 0.7}, QUICK_ANIMATION)
                            end
                        end)
                        
                        OptionButton.MouseLeave:Connect(function()
                            if option ~= currentOption then
                                Utility:Tween(OptionButton, {BackgroundTransparency = 1}, QUICK_ANIMATION)
                            end
                        end)
                        
                        OptionButton.MouseButton1Click:Connect(function()
                            -- Update current option
                            currentOption = option
                            DropdownValue.Text = currentOption
                            
                            -- Update all option buttons
                            for _, btn in pairs(DropdownScroll:GetChildren()) do
                                if btn:IsA("TextButton") then
                                    if btn.Text == currentOption then
                                        Utility:Tween(btn, {BackgroundTransparency = 0.3}, QUICK_ANIMATION)
                                        Utility:Tween(btn, {TextColor3 = Colors.Primary}, QUICK_ANIMATION)
                                    else
                                        Utility:Tween(btn, {BackgroundTransparency = 1}, QUICK_ANIMATION)
                                        Utility:Tween(btn, {TextColor3 = Colors.Text}, QUICK_ANIMATION)
                                    end
                                end
                            end
                            
                            -- Close dropdown
                            isOpen = false
                            Utility:Tween(DropdownList, {Size = UDim2.new(1, 0, 0, 0)}, QUICK_ANIMATION)
                            Utility:Tween(DropdownIcon, {Rotation = 0}, QUICK_ANIMATION)
                            
                            spawn(function()
                                wait(QUICK_ANIMATION)
                                DropdownList.Visible = false
                                Dropdown.Size = UDim2.new(1, 0, 0, 35)
                            end)
                            
                            spawn(function()
                                callback(currentOption)
                            end)
                        end)
                    end
                end
                
                -- Initialize options
                createOptions()
                
                -- Dropdown toggle
                DropdownButton.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    
                    if isOpen then
                        DropdownList.Visible = true
                        local listHeight = math.min(#options * 32 + 10, 150)
                        Dropdown.Size = UDim2.new(1, 0, 0, 35 + listHeight + 5)
                        Utility:Tween(DropdownList, {Size = UDim2.new(1, 0, 0, listHeight)}, QUICK_ANIMATION)
                        Utility:Tween(DropdownIcon, {Rotation = 180}, QUICK_ANIMATION)
                    else
                        Utility:Tween(DropdownList, {Size = UDim2.new(1, 0, 0, 0)}, QUICK_ANIMATION)
                        Utility:Tween(DropdownIcon, {Rotation = 0}, QUICK_ANIMATION)
                        
                        spawn(function()
                            wait(QUICK_ANIMATION)
                            DropdownList.Visible = false
                            Dropdown.Size = UDim2.new(1, 0, 0, 35)
                        end)
                    end
                end)
                
                -- Hover effects
                DropdownButton.MouseEnter:Connect(function()
                    Utility:Tween(DropdownButton, {BackgroundTransparency = 0.1}, QUICK_ANIMATION)
                end)
                
                DropdownButton.MouseLeave:Connect(function()
                    Utility:Tween(DropdownButton, {BackgroundTransparency = 0.3}, QUICK_ANIMATION)
                end)
                
                return {
                    SetValue = function(value)
                        if table.find(options, value) then
                            currentOption = value
                            DropdownValue.Text = currentOption
                            createOptions()
                        end
                    end,
                    GetValue = function()
                        return currentOption
                    end,
                    SetOptions = function(newOptions)
                        options = newOptions
                        if not table.find(options, currentOption) and #options > 0 then
                            currentOption = options[1]
                            DropdownValue.Text = currentOption
                        end
                        createOptions()
                    end
                }
            end
            
            -- FIXED TEXTBOX
            function SectionElements:TextBox(placeholder, default, callback)
                placeholder = placeholder or "Enter text..."
                default = default or ""
                callback = callback or function() end
                
                local TextBoxFrame = Instance.new("Frame")
                local TextBoxCorner = Instance.new("UICorner")
                local TextInput = Instance.new("TextBox")
                local TextInputCorner = Instance.new("UICorner")
                local TextInputStroke = Instance.new("UIStroke")
                
                TextBoxFrame.Name = "TextBox"
                TextBoxFrame.Parent = SectionContent
                TextBoxFrame.Size = UDim2.new(1, 0, 0, 35)
                TextBoxFrame.BackgroundColor3 = Colors.SurfaceLight
                TextBoxFrame.BackgroundTransparency = 0.3
                TextBoxFrame.BorderSizePixel = 0
                
                TextBoxCorner.CornerRadius = UDim.new(0, 8)
                TextBoxCorner.Parent = TextBoxFrame
                
                TextInput.Name = "Input"
                TextInput.Parent = TextBoxFrame
                TextInput.Position = UDim2.new(0, 5, 0, 5)
                TextInput.Size = UDim2.new(1, -10, 1, -10)
                TextInput.BackgroundColor3 = Colors.Background
                TextInput.BackgroundTransparency = 0.2
                TextInput.BorderSizePixel = 0
                TextInput.Font = Enum.Font.Gotham
                TextInput.PlaceholderText = placeholder
                TextInput.PlaceholderColor3 = Colors.TextSecondary
                TextInput.Text = default
                TextInput.TextColor3 = Colors.Text
                TextInput.TextSize = 13
                TextInput.TextXAlignment = Enum.TextXAlignment.Left
                TextInput.ClearTextOnFocus = false
                
                TextInputCorner.CornerRadius = UDim.new(0, 6)
                TextInputCorner.Parent = TextInput
                
                TextInputStroke.Color = Colors.Border
                TextInputStroke.Thickness = 1
                TextInputStroke.Transparency = 0.5
                TextInputStroke.Parent = TextInput
                
                -- Focus effects
                TextInput.Focused:Connect(function()
                    Utility:Tween(TextInputStroke, {Color = Colors.Primary, Transparency = 0}, QUICK_ANIMATION)
                    Utility:Tween(TextInput, {BackgroundTransparency = 0}, QUICK_ANIMATION)
                end)
                
                TextInput.FocusLost:Connect(function()
                    Utility:Tween(TextInputStroke, {Color = Colors.Border, Transparency = 0.5}, QUICK_ANIMATION)
                    Utility:Tween(TextInput, {BackgroundTransparency = 0.2}, QUICK_ANIMATION)
                    spawn(function()
                        callback(TextInput.Text)
                    end)
                end)
                
                return {
                    SetText = function(text)
                        TextInput.Text = text
                    end,
                    GetText = function()
                        return TextInput.Text
                    end
                }
            end
            
            function SectionElements:Label(text)
                text = text or "Label"
                
                local Label = Instance.new("Frame")
                local LabelCorner = Instance.new("UICorner")
                local LabelText = Instance.new("TextLabel")
                
                Label.Name = "Label"
                Label.Parent = SectionContent
                Label.Size = UDim2.new(1, 0, 0, 30)
                Label.BackgroundColor3 = Colors.SurfaceLight
                Label.BackgroundTransparency = 0.5
                Label.BorderSizePixel = 0
                
                LabelCorner.CornerRadius = UDim.new(0, 8)
                LabelCorner.Parent = Label
                
                LabelText.Name = "Text"
                LabelText.Parent = Label
                LabelText.Position = UDim2.new(0, 15, 0, 0)
                LabelText.Size = UDim2.new(1, -30, 1, 0)
                LabelText.BackgroundTransparency = 1
                LabelText.Font = Enum.Font.Gotham
                LabelText.Text = text
                LabelText.TextColor3 = Colors.TextSecondary
                LabelText.TextSize = 13
                LabelText.TextXAlignment = Enum.TextXAlignment.Left
                
                return {
                    SetText = function(newText)
                        LabelText.Text = newText
                    end
                }
            end
            
            return SectionElements
        end
        
        return Elements
    end
    
    return Tabs
end

-- Fixed Notification system
function Library:Notify(config)
    config = config or {}
    local title = config.Title or "Notification"
    local text = config.Text or "This is a notification"
    local duration = config.Duration or 3
    local type = config.Type or "Info" -- Info, Success, Warning, Error
    
    local colors = {
        Info = Colors.Primary,
        Success = Colors.Success,
        Warning = Colors.Warning,
        Error = Colors.Error
    }
    
    -- Create notification container if it doesn't exist
    local notificationContainer = CoreGui:FindFirstChild("ModernUI_Notifications")
    if not notificationContainer then
        notificationContainer = Instance.new("ScreenGui")
        notificationContainer.Name = "ModernUI_Notifications"
        notificationContainer.Parent = CoreGui
        notificationContainer.ResetOnSpawn = false
        notificationContainer.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        
        local container = Instance.new("Frame")
        container.Name = "Container"
        container.Parent = notificationContainer
        container.AnchorPoint = Vector2.new(1, 0)
        container.Position = UDim2.new(1, -20, 0, 20)
        container.Size = UDim2.new(0, 300, 1, -40)
        container.BackgroundTransparency = 1
        container.BorderSizePixel = 0
        
        local layout = Instance.new("UIListLayout")
        layout.Parent = container
        layout.SortOrder = Enum.SortOrder.LayoutOrder
        layout.Padding = UDim.new(0, 10)
        layout.VerticalAlignment = Enum.VerticalAlignment.Top
    end
    
    local container = notificationContainer.Container
    
    -- Create notification
    local notification = Instance.new("Frame")
    local notifCorner = Instance.new("UICorner")
    local notifStroke = Instance.new("UIStroke")
    local notifGlow = Instance.new("ImageLabel")
    local titleLabel = Instance.new("TextLabel")
    local textLabel = Instance.new("TextLabel")
    local closeButton = Instance.new("TextButton")
    local closeIcon = Instance.new("ImageLabel")
    
    notification.Name = "Notification"
    notification.Parent = container
    notification.Size = UDim2.new(1, 0, 0, 80)
    notification.BackgroundColor3 = Colors.Surface
    notification.BackgroundTransparency = 0.1
    notification.BorderSizePixel = 0
    notification.Position = UDim2.new(1, 0, 0, 0)
    
    notifCorner.CornerRadius = UDim.new(0, 12)
    notifCorner.Parent = notification
    
    notifStroke.Color = colors[type] or Colors.Primary
    notifStroke.Thickness = 2
    notifStroke.Transparency = 0.3
    notifStroke.Parent = notification
    
    notifGlow.Name = "Glow"
    notifGlow.Parent = notification
    notifGlow.AnchorPoint = Vector2.new(0.5, 0.5)
    notifGlow.Position = UDim2.new(0.5, 0, 0.5, 0)
    notifGlow.Size = UDim2.new(1, 40, 1, 40)
    notifGlow.BackgroundTransparency = 1
    notifGlow.Image = "rbxassetid://8560915132"
    notifGlow.ImageColor3 = colors[type] or Colors.Primary
    notifGlow.ImageTransparency = 0.8
    notifGlow.ZIndex = -1
    
    titleLabel.Name = "Title"
    titleLabel.Parent = notification
    titleLabel.Position = UDim2.new(0, 15, 0, 10)
    titleLabel.Size = UDim2.new(1, -50, 0, 20)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Text = title
    titleLabel.TextColor3 = Colors.Text
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    textLabel.Name = "Text"
    textLabel.Parent = notification
    textLabel.Position = UDim2.new(0, 15, 0, 35)
    textLabel.Size = UDim2.new(1, -50, 0, 35)
    textLabel.BackgroundTransparency = 1
    textLabel.Font = Enum.Font.Gotham
    textLabel.Text = text
    textLabel.TextColor3 = Colors.TextSecondary
    textLabel.TextSize = 12
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextWrapped = true
    
    closeButton.Name = "Close"
    closeButton.Parent = notification
    closeButton.AnchorPoint = Vector2.new(1, 0)
    closeButton.Position = UDim2.new(1, -10, 0, 10)
    closeButton.Size = UDim2.new(0, 20, 0, 20)
    closeButton.BackgroundTransparency = 1
    closeButton.BorderSizePixel = 0
    closeButton.Text = ""
    
    closeIcon.Name = "Icon"
    closeIcon.Parent = closeButton
    closeIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    closeIcon.Position = UDim2.new(0.5, 0, 0.5, 0)
    closeIcon.Size = UDim2.new(0, 12, 0, 12)
    closeIcon.BackgroundTransparency = 1
    closeIcon.Image = "rbxassetid://10747384394"
    closeIcon.ImageColor3 = Colors.TextSecondary
    
    -- Animations
    spawn(function()
        -- Slide in
        Utility:Tween(notification, {Position = UDim2.new(0, 0, 0, 0)}, ANIMATION_SPEED, Enum.EasingStyle.Back)
        
        -- Auto close
        wait(duration)
        
        -- Slide out
        Utility:Tween(notification, {Position = UDim2.new(1, 0, 0, 0)}, ANIMATION_SPEED, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        
        wait(ANIMATION_SPEED)
        notification:Destroy()
    end)
    
    -- Close button
    closeButton.MouseButton1Click:Connect(function()
        Utility:Tween(notification, {Position = UDim2.new(1, 0, 0, 0)}, ANIMATION_SPEED, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        spawn(function()
            wait(ANIMATION_SPEED)
            notification:Destroy()
        end)
    end)
    
    closeButton.MouseEnter:Connect(function()
        Utility:Tween(closeIcon, {ImageColor3 = Colors.Text}, QUICK_ANIMATION)
    end)
    
    closeButton.MouseLeave:Connect(function()
        Utility:Tween(closeIcon, {ImageColor3 = Colors.TextSecondary}, QUICK_ANIMATION)
    end)
end

return Library
